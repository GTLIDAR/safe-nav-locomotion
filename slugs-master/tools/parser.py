# LR(1) parser, autogenerated on 2013-07-23 20:35:05
# generator: wisent 0.6.2, http://seehuhn.de/pages/wisent
# source: grammar.wi

# All parts of this file which are not taken verbatim from the input grammar
# are covered by the following notice:
#
# Copyright (C) 2008, 2009  Jochen Voss <voss@seehuhn.de>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#   3. The name of the author may not be used to endorse or promote
#      products derived from this software without specific prior
#      written permission.
#
# This software is provided by the author "as is" and any express or
# implied warranties, including, but not limited to, the implied
# warranties of merchantability and fitness for a particular purpose
# are disclaimed.  In no event shall the author be liable for any
# direct, indirect, incidental, special, exemplary, or consequential
# damages (including, but not limited to, procurement of substitute
# goods or services; loss of use, data, or profits; or business
# interruption) however caused and on any theory of liability, whether
# in contract, strict liability, or tort (including negligence or
# otherwise) arising in any way out of the use of this software, even
# if advised of the possibility of such damage.

from itertools import chain

class Unique(object):

    """Unique objects for use as markers.

    These objects are internally used to represent the start symbol
    and the end-of-input marker of the grammar.
    """

    def __init__(self, label):
        """Create a new unique object.

        `label` is a string which is used as a textual representation
        of the object.
        """
        self.label = label

    def __repr__(self):
        """Return the `label` given at object construction."""
        return self.label

class Parser(object):

    """LR(1) parser class.

    terminal symbols:
      '!', '&', '(', ')', '*', '+', '-', '/', '0', '1', ';', '<', '=', '>',
      'F', 'FALSE', 'G', 'TRUE', 'U', 'W', 'X', '[', '\\', ']', '^', 'id',
      'next', '|', '~'

    nonterminal symbols:
      'Assignment', 'AtomicFormula', 'Biimplication', 'BiimplicationOperator',
      'BinaryTemporalFormula', 'BinaryTemporalOperator', 'Brackets',
      'Conjunction', 'ConjunctionOperator', 'Disjunction',
      'DisjunctionOperator', 'FinallyOperator', 'Formula', 'GloballyOperator',
      'Implication', 'ImplicationOperator', 'NextOperator', 'NotOperator',
      'UnaryFormula', 'UnaryTemporalOperator', 'UntilOperator',
      'WeakUntilOperator', 'Xor', 'XorOperator'

    production rules:
      'Formula' -> 'Biimplication' ';'
      'Biimplication' -> 'Implication'
      'Biimplication' -> 'Biimplication' 'BiimplicationOperator' 'Implication'
      'Implication' -> 'Xor'
      'Implication' -> 'Implication' 'ImplicationOperator' 'Xor'
      'Xor' -> 'Disjunction'
      'Xor' -> 'Xor' 'XorOperator' 'Disjunction'
      'Disjunction' -> 'Conjunction'
      'Disjunction' -> 'Disjunction' 'DisjunctionOperator' 'Conjunction'
      'Conjunction' -> 'BinaryTemporalFormula'
      'Conjunction' -> 'Conjunction' 'ConjunctionOperator' 'BinaryTemporalFormula'
      'BinaryTemporalFormula' -> 'UnaryFormula'
      'BinaryTemporalFormula' -> 'BinaryTemporalFormula' 'BinaryTemporalOperator' 'UnaryFormula'
      'UnaryFormula' -> 'AtomicFormula'
      'UnaryFormula' -> 'UnaryTemporalOperator' 'UnaryFormula'
      'AtomicFormula' -> 'FALSE'
      'AtomicFormula' -> 'TRUE'
      'AtomicFormula' -> 'Brackets'
      'AtomicFormula' -> 'Assignment'
      'Brackets' -> '(' 'Biimplication' ')'
      'Brackets' -> '[' 'Biimplication' ']'
      'BinaryTemporalOperator' -> 'UntilOperator'
      'BinaryTemporalOperator' -> 'WeakUntilOperator'
      'UntilOperator' -> 'U'
      'WeakUntilOperator' -> 'W'
      'ImplicationOperator' -> '-' '-' '>'
      'ImplicationOperator' -> '-' '>'
      'BiimplicationOperator' -> '<' '-' '-' '>'
      'BiimplicationOperator' -> '<' '-' '>'
      'DisjunctionOperator' -> '+'
      'DisjunctionOperator' -> '\\' '/'
      'DisjunctionOperator' -> '|'
      'DisjunctionOperator' -> '|' '|'
      'ConjunctionOperator' -> '*'
      'ConjunctionOperator' -> '/' '\\'
      'ConjunctionOperator' -> '&'
      'ConjunctionOperator' -> '&' '&'
      'XorOperator' -> '^'
      'UnaryTemporalOperator' -> 'FinallyOperator'
      'UnaryTemporalOperator' -> 'NextOperator'
      'UnaryTemporalOperator' -> 'GloballyOperator'
      'UnaryTemporalOperator' -> 'NotOperator'
      'FinallyOperator' -> '<' '>'
      'FinallyOperator' -> 'F'
      'NextOperator' -> '(' ')'
      'NextOperator' -> 'next'
      'NextOperator' -> 'X'
      'GloballyOperator' -> '[' ']'
      'GloballyOperator' -> 'G'
      'NotOperator' -> '!'
      'NotOperator' -> '~'
      'Assignment' -> 'id'
      'Assignment' -> 'id' '=' '0'
      'Assignment' -> 'id' '=' '1'
    """

    class ParseErrors(Exception):

        """Exception class to represent a collection of parse errors.

        Instances of this class have two attributes, `errors` and `tree`.
        `errors` is a list of tuples, each describing one error.
        Each tuple consists of the first input token which could not
        be processed and the list of grammar symbols which were allowed
        at this point.
        `tree` is a "repaired" parse tree which might be used for further
        error checking, or `None` if no repair was possible.
        """

        def __init__(self, errors, tree):
            msg = "%d parse errors"%len(errors)
            Exception.__init__(self, msg)
            self.errors = errors
            self.tree = tree

    terminals = [ '!', '&', '(', ')', '*', '+', '-', '/', '0', '1', ';', '<',
                  '=', '>', 'F', 'FALSE', 'G', 'TRUE', 'U', 'W', 'X', '[',
                  '\\', ']', '^', 'id', 'next', '|', '~' ]
    EOF = Unique('EOF')
    S = Unique('S')

    _halting_state = 77
    _reduce = {
        (3, EOF): ('Formula', 2), (4, ')'): ('Biimplication', 1),
        (4, ';'): ('Biimplication', 1), (4, '<'): ('Biimplication', 1),
        (4, ']'): ('Biimplication', 1), (8, ')'): ('Biimplication', 3),
        (8, ';'): ('Biimplication', 3), (8, '<'): ('Biimplication', 3),
        (8, ']'): ('Biimplication', 3), (9, ')'): ('Implication', 1),
        (9, '-'): ('Implication', 1), (9, ';'): ('Implication', 1),
        (9, '<'): ('Implication', 1), (9, ']'): ('Implication', 1),
        (11, ')'): ('Implication', 3), (11, '-'): ('Implication', 3),
        (11, ';'): ('Implication', 3), (11, '<'): ('Implication', 3),
        (11, ']'): ('Implication', 3), (12, ')'): ('Xor', 1),
        (12, '-'): ('Xor', 1), (12, ';'): ('Xor', 1), (12, '<'): ('Xor', 1),
        (12, ']'): ('Xor', 1), (12, '^'): ('Xor', 1), (14, ')'): ('Xor', 3),
        (14, '-'): ('Xor', 3), (14, ';'): ('Xor', 3), (14, '<'): ('Xor', 3),
        (14, ']'): ('Xor', 3), (14, '^'): ('Xor', 3),
        (15, ')'): ('Disjunction', 1), (15, '+'): ('Disjunction', 1),
        (15, '-'): ('Disjunction', 1), (15, ';'): ('Disjunction', 1),
        (15, '<'): ('Disjunction', 1), (15, '\\'): ('Disjunction', 1),
        (15, ']'): ('Disjunction', 1), (15, '^'): ('Disjunction', 1),
        (15, '|'): ('Disjunction', 1), (17, ')'): ('Disjunction', 3),
        (17, '+'): ('Disjunction', 3), (17, '-'): ('Disjunction', 3),
        (17, ';'): ('Disjunction', 3), (17, '<'): ('Disjunction', 3),
        (17, '\\'): ('Disjunction', 3), (17, ']'): ('Disjunction', 3),
        (17, '^'): ('Disjunction', 3), (17, '|'): ('Disjunction', 3),
        (18, '&'): ('Conjunction', 1), (18, ')'): ('Conjunction', 1),
        (18, '*'): ('Conjunction', 1), (18, '+'): ('Conjunction', 1),
        (18, '-'): ('Conjunction', 1), (18, '/'): ('Conjunction', 1),
        (18, ';'): ('Conjunction', 1), (18, '<'): ('Conjunction', 1),
        (18, '\\'): ('Conjunction', 1), (18, ']'): ('Conjunction', 1),
        (18, '^'): ('Conjunction', 1), (18, '|'): ('Conjunction', 1),
        (20, '&'): ('Conjunction', 3), (20, ')'): ('Conjunction', 3),
        (20, '*'): ('Conjunction', 3), (20, '+'): ('Conjunction', 3),
        (20, '-'): ('Conjunction', 3), (20, '/'): ('Conjunction', 3),
        (20, ';'): ('Conjunction', 3), (20, '<'): ('Conjunction', 3),
        (20, '\\'): ('Conjunction', 3), (20, ']'): ('Conjunction', 3),
        (20, '^'): ('Conjunction', 3), (20, '|'): ('Conjunction', 3),
        (21, '&'): ('BinaryTemporalFormula', 1),
        (21, ')'): ('BinaryTemporalFormula', 1),
        (21, '*'): ('BinaryTemporalFormula', 1),
        (21, '+'): ('BinaryTemporalFormula', 1),
        (21, '-'): ('BinaryTemporalFormula', 1),
        (21, '/'): ('BinaryTemporalFormula', 1),
        (21, ';'): ('BinaryTemporalFormula', 1),
        (21, '<'): ('BinaryTemporalFormula', 1),
        (21, 'U'): ('BinaryTemporalFormula', 1),
        (21, 'W'): ('BinaryTemporalFormula', 1),
        (21, '\\'): ('BinaryTemporalFormula', 1),
        (21, ']'): ('BinaryTemporalFormula', 1),
        (21, '^'): ('BinaryTemporalFormula', 1),
        (21, '|'): ('BinaryTemporalFormula', 1),
        (23, '&'): ('BinaryTemporalFormula', 3),
        (23, ')'): ('BinaryTemporalFormula', 3),
        (23, '*'): ('BinaryTemporalFormula', 3),
        (23, '+'): ('BinaryTemporalFormula', 3),
        (23, '-'): ('BinaryTemporalFormula', 3),
        (23, '/'): ('BinaryTemporalFormula', 3),
        (23, ';'): ('BinaryTemporalFormula', 3),
        (23, '<'): ('BinaryTemporalFormula', 3),
        (23, 'U'): ('BinaryTemporalFormula', 3),
        (23, 'W'): ('BinaryTemporalFormula', 3),
        (23, '\\'): ('BinaryTemporalFormula', 3),
        (23, ']'): ('BinaryTemporalFormula', 3),
        (23, '^'): ('BinaryTemporalFormula', 3),
        (23, '|'): ('BinaryTemporalFormula', 3),
        (24, '&'): ('UnaryFormula', 1), (24, ')'): ('UnaryFormula', 1),
        (24, '*'): ('UnaryFormula', 1), (24, '+'): ('UnaryFormula', 1),
        (24, '-'): ('UnaryFormula', 1), (24, '/'): ('UnaryFormula', 1),
        (24, ';'): ('UnaryFormula', 1), (24, '<'): ('UnaryFormula', 1),
        (24, 'U'): ('UnaryFormula', 1), (24, 'W'): ('UnaryFormula', 1),
        (24, '\\'): ('UnaryFormula', 1), (24, ']'): ('UnaryFormula', 1),
        (24, '^'): ('UnaryFormula', 1), (24, '|'): ('UnaryFormula', 1),
        (26, '&'): ('UnaryFormula', 2), (26, ')'): ('UnaryFormula', 2),
        (26, '*'): ('UnaryFormula', 2), (26, '+'): ('UnaryFormula', 2),
        (26, '-'): ('UnaryFormula', 2), (26, '/'): ('UnaryFormula', 2),
        (26, ';'): ('UnaryFormula', 2), (26, '<'): ('UnaryFormula', 2),
        (26, 'U'): ('UnaryFormula', 2), (26, 'W'): ('UnaryFormula', 2),
        (26, '\\'): ('UnaryFormula', 2), (26, ']'): ('UnaryFormula', 2),
        (26, '^'): ('UnaryFormula', 2), (26, '|'): ('UnaryFormula', 2),
        (27, '&'): ('AtomicFormula', 1), (27, ')'): ('AtomicFormula', 1),
        (27, '*'): ('AtomicFormula', 1), (27, '+'): ('AtomicFormula', 1),
        (27, '-'): ('AtomicFormula', 1), (27, '/'): ('AtomicFormula', 1),
        (27, ';'): ('AtomicFormula', 1), (27, '<'): ('AtomicFormula', 1),
        (27, 'U'): ('AtomicFormula', 1), (27, 'W'): ('AtomicFormula', 1),
        (27, '\\'): ('AtomicFormula', 1), (27, ']'): ('AtomicFormula', 1),
        (27, '^'): ('AtomicFormula', 1), (27, '|'): ('AtomicFormula', 1),
        (28, '&'): ('AtomicFormula', 1), (28, ')'): ('AtomicFormula', 1),
        (28, '*'): ('AtomicFormula', 1), (28, '+'): ('AtomicFormula', 1),
        (28, '-'): ('AtomicFormula', 1), (28, '/'): ('AtomicFormula', 1),
        (28, ';'): ('AtomicFormula', 1), (28, '<'): ('AtomicFormula', 1),
        (28, 'U'): ('AtomicFormula', 1), (28, 'W'): ('AtomicFormula', 1),
        (28, '\\'): ('AtomicFormula', 1), (28, ']'): ('AtomicFormula', 1),
        (28, '^'): ('AtomicFormula', 1), (28, '|'): ('AtomicFormula', 1),
        (29, '&'): ('AtomicFormula', 1), (29, ')'): ('AtomicFormula', 1),
        (29, '*'): ('AtomicFormula', 1), (29, '+'): ('AtomicFormula', 1),
        (29, '-'): ('AtomicFormula', 1), (29, '/'): ('AtomicFormula', 1),
        (29, ';'): ('AtomicFormula', 1), (29, '<'): ('AtomicFormula', 1),
        (29, 'U'): ('AtomicFormula', 1), (29, 'W'): ('AtomicFormula', 1),
        (29, '\\'): ('AtomicFormula', 1), (29, ']'): ('AtomicFormula', 1),
        (29, '^'): ('AtomicFormula', 1), (29, '|'): ('AtomicFormula', 1),
        (30, '&'): ('AtomicFormula', 1), (30, ')'): ('AtomicFormula', 1),
        (30, '*'): ('AtomicFormula', 1), (30, '+'): ('AtomicFormula', 1),
        (30, '-'): ('AtomicFormula', 1), (30, '/'): ('AtomicFormula', 1),
        (30, ';'): ('AtomicFormula', 1), (30, '<'): ('AtomicFormula', 1),
        (30, 'U'): ('AtomicFormula', 1), (30, 'W'): ('AtomicFormula', 1),
        (30, '\\'): ('AtomicFormula', 1), (30, ']'): ('AtomicFormula', 1),
        (30, '^'): ('AtomicFormula', 1), (30, '|'): ('AtomicFormula', 1),
        (32, '&'): ('Brackets', 3), (32, ')'): ('Brackets', 3),
        (32, '*'): ('Brackets', 3), (32, '+'): ('Brackets', 3),
        (32, '-'): ('Brackets', 3), (32, '/'): ('Brackets', 3),
        (32, ';'): ('Brackets', 3), (32, '<'): ('Brackets', 3),
        (32, 'U'): ('Brackets', 3), (32, 'W'): ('Brackets', 3),
        (32, '\\'): ('Brackets', 3), (32, ']'): ('Brackets', 3),
        (32, '^'): ('Brackets', 3), (32, '|'): ('Brackets', 3),
        (34, '&'): ('Brackets', 3), (34, ')'): ('Brackets', 3),
        (34, '*'): ('Brackets', 3), (34, '+'): ('Brackets', 3),
        (34, '-'): ('Brackets', 3), (34, '/'): ('Brackets', 3),
        (34, ';'): ('Brackets', 3), (34, '<'): ('Brackets', 3),
        (34, 'U'): ('Brackets', 3), (34, 'W'): ('Brackets', 3),
        (34, '\\'): ('Brackets', 3), (34, ']'): ('Brackets', 3),
        (34, '^'): ('Brackets', 3), (34, '|'): ('Brackets', 3),
        (35, '!'): ('BinaryTemporalOperator', 1),
        (35, '('): ('BinaryTemporalOperator', 1),
        (35, '<'): ('BinaryTemporalOperator', 1),
        (35, 'F'): ('BinaryTemporalOperator', 1),
        (35, 'FALSE'): ('BinaryTemporalOperator', 1),
        (35, 'G'): ('BinaryTemporalOperator', 1),
        (35, 'TRUE'): ('BinaryTemporalOperator', 1),
        (35, 'X'): ('BinaryTemporalOperator', 1),
        (35, '['): ('BinaryTemporalOperator', 1),
        (35, 'id'): ('BinaryTemporalOperator', 1),
        (35, 'next'): ('BinaryTemporalOperator', 1),
        (35, '~'): ('BinaryTemporalOperator', 1),
        (36, '!'): ('BinaryTemporalOperator', 1),
        (36, '('): ('BinaryTemporalOperator', 1),
        (36, '<'): ('BinaryTemporalOperator', 1),
        (36, 'F'): ('BinaryTemporalOperator', 1),
        (36, 'FALSE'): ('BinaryTemporalOperator', 1),
        (36, 'G'): ('BinaryTemporalOperator', 1),
        (36, 'TRUE'): ('BinaryTemporalOperator', 1),
        (36, 'X'): ('BinaryTemporalOperator', 1),
        (36, '['): ('BinaryTemporalOperator', 1),
        (36, 'id'): ('BinaryTemporalOperator', 1),
        (36, 'next'): ('BinaryTemporalOperator', 1),
        (36, '~'): ('BinaryTemporalOperator', 1),
        (37, '!'): ('UntilOperator', 1), (37, '('): ('UntilOperator', 1),
        (37, '<'): ('UntilOperator', 1), (37, 'F'): ('UntilOperator', 1),
        (37, 'FALSE'): ('UntilOperator', 1), (37, 'G'): ('UntilOperator', 1),
        (37, 'TRUE'): ('UntilOperator', 1), (37, 'X'): ('UntilOperator', 1),
        (37, '['): ('UntilOperator', 1), (37, 'id'): ('UntilOperator', 1),
        (37, 'next'): ('UntilOperator', 1), (37, '~'): ('UntilOperator', 1),
        (38, '!'): ('WeakUntilOperator', 1),
        (38, '('): ('WeakUntilOperator', 1),
        (38, '<'): ('WeakUntilOperator', 1),
        (38, 'F'): ('WeakUntilOperator', 1),
        (38, 'FALSE'): ('WeakUntilOperator', 1),
        (38, 'G'): ('WeakUntilOperator', 1),
        (38, 'TRUE'): ('WeakUntilOperator', 1),
        (38, 'X'): ('WeakUntilOperator', 1),
        (38, '['): ('WeakUntilOperator', 1),
        (38, 'id'): ('WeakUntilOperator', 1),
        (38, 'next'): ('WeakUntilOperator', 1),
        (38, '~'): ('WeakUntilOperator', 1),
        (41, '!'): ('ImplicationOperator', 3),
        (41, '('): ('ImplicationOperator', 3),
        (41, '<'): ('ImplicationOperator', 3),
        (41, 'F'): ('ImplicationOperator', 3),
        (41, 'FALSE'): ('ImplicationOperator', 3),
        (41, 'G'): ('ImplicationOperator', 3),
        (41, 'TRUE'): ('ImplicationOperator', 3),
        (41, 'X'): ('ImplicationOperator', 3),
        (41, '['): ('ImplicationOperator', 3),
        (41, 'id'): ('ImplicationOperator', 3),
        (41, 'next'): ('ImplicationOperator', 3),
        (41, '~'): ('ImplicationOperator', 3),
        (42, '!'): ('ImplicationOperator', 2),
        (42, '('): ('ImplicationOperator', 2),
        (42, '<'): ('ImplicationOperator', 2),
        (42, 'F'): ('ImplicationOperator', 2),
        (42, 'FALSE'): ('ImplicationOperator', 2),
        (42, 'G'): ('ImplicationOperator', 2),
        (42, 'TRUE'): ('ImplicationOperator', 2),
        (42, 'X'): ('ImplicationOperator', 2),
        (42, '['): ('ImplicationOperator', 2),
        (42, 'id'): ('ImplicationOperator', 2),
        (42, 'next'): ('ImplicationOperator', 2),
        (42, '~'): ('ImplicationOperator', 2),
        (46, '!'): ('BiimplicationOperator', 4),
        (46, '('): ('BiimplicationOperator', 4),
        (46, '<'): ('BiimplicationOperator', 4),
        (46, 'F'): ('BiimplicationOperator', 4),
        (46, 'FALSE'): ('BiimplicationOperator', 4),
        (46, 'G'): ('BiimplicationOperator', 4),
        (46, 'TRUE'): ('BiimplicationOperator', 4),
        (46, 'X'): ('BiimplicationOperator', 4),
        (46, '['): ('BiimplicationOperator', 4),
        (46, 'id'): ('BiimplicationOperator', 4),
        (46, 'next'): ('BiimplicationOperator', 4),
        (46, '~'): ('BiimplicationOperator', 4),
        (47, '!'): ('BiimplicationOperator', 3),
        (47, '('): ('BiimplicationOperator', 3),
        (47, '<'): ('BiimplicationOperator', 3),
        (47, 'F'): ('BiimplicationOperator', 3),
        (47, 'FALSE'): ('BiimplicationOperator', 3),
        (47, 'G'): ('BiimplicationOperator', 3),
        (47, 'TRUE'): ('BiimplicationOperator', 3),
        (47, 'X'): ('BiimplicationOperator', 3),
        (47, '['): ('BiimplicationOperator', 3),
        (47, 'id'): ('BiimplicationOperator', 3),
        (47, 'next'): ('BiimplicationOperator', 3),
        (47, '~'): ('BiimplicationOperator', 3),
        (48, '!'): ('DisjunctionOperator', 1),
        (48, '('): ('DisjunctionOperator', 1),
        (48, '<'): ('DisjunctionOperator', 1),
        (48, 'F'): ('DisjunctionOperator', 1),
        (48, 'FALSE'): ('DisjunctionOperator', 1),
        (48, 'G'): ('DisjunctionOperator', 1),
        (48, 'TRUE'): ('DisjunctionOperator', 1),
        (48, 'X'): ('DisjunctionOperator', 1),
        (48, '['): ('DisjunctionOperator', 1),
        (48, 'id'): ('DisjunctionOperator', 1),
        (48, 'next'): ('DisjunctionOperator', 1),
        (48, '~'): ('DisjunctionOperator', 1),
        (50, '!'): ('DisjunctionOperator', 2),
        (50, '('): ('DisjunctionOperator', 2),
        (50, '<'): ('DisjunctionOperator', 2),
        (50, 'F'): ('DisjunctionOperator', 2),
        (50, 'FALSE'): ('DisjunctionOperator', 2),
        (50, 'G'): ('DisjunctionOperator', 2),
        (50, 'TRUE'): ('DisjunctionOperator', 2),
        (50, 'X'): ('DisjunctionOperator', 2),
        (50, '['): ('DisjunctionOperator', 2),
        (50, 'id'): ('DisjunctionOperator', 2),
        (50, 'next'): ('DisjunctionOperator', 2),
        (50, '~'): ('DisjunctionOperator', 2),
        (51, '!'): ('DisjunctionOperator', 1),
        (51, '('): ('DisjunctionOperator', 1),
        (51, '<'): ('DisjunctionOperator', 1),
        (51, 'F'): ('DisjunctionOperator', 1),
        (51, 'FALSE'): ('DisjunctionOperator', 1),
        (51, 'G'): ('DisjunctionOperator', 1),
        (51, 'TRUE'): ('DisjunctionOperator', 1),
        (51, 'X'): ('DisjunctionOperator', 1),
        (51, '['): ('DisjunctionOperator', 1),
        (51, 'id'): ('DisjunctionOperator', 1),
        (51, 'next'): ('DisjunctionOperator', 1),
        (51, '~'): ('DisjunctionOperator', 1),
        (52, '!'): ('DisjunctionOperator', 2),
        (52, '('): ('DisjunctionOperator', 2),
        (52, '<'): ('DisjunctionOperator', 2),
        (52, 'F'): ('DisjunctionOperator', 2),
        (52, 'FALSE'): ('DisjunctionOperator', 2),
        (52, 'G'): ('DisjunctionOperator', 2),
        (52, 'TRUE'): ('DisjunctionOperator', 2),
        (52, 'X'): ('DisjunctionOperator', 2),
        (52, '['): ('DisjunctionOperator', 2),
        (52, 'id'): ('DisjunctionOperator', 2),
        (52, 'next'): ('DisjunctionOperator', 2),
        (52, '~'): ('DisjunctionOperator', 2),
        (53, '!'): ('ConjunctionOperator', 1),
        (53, '('): ('ConjunctionOperator', 1),
        (53, '<'): ('ConjunctionOperator', 1),
        (53, 'F'): ('ConjunctionOperator', 1),
        (53, 'FALSE'): ('ConjunctionOperator', 1),
        (53, 'G'): ('ConjunctionOperator', 1),
        (53, 'TRUE'): ('ConjunctionOperator', 1),
        (53, 'X'): ('ConjunctionOperator', 1),
        (53, '['): ('ConjunctionOperator', 1),
        (53, 'id'): ('ConjunctionOperator', 1),
        (53, 'next'): ('ConjunctionOperator', 1),
        (53, '~'): ('ConjunctionOperator', 1),
        (55, '!'): ('ConjunctionOperator', 2),
        (55, '('): ('ConjunctionOperator', 2),
        (55, '<'): ('ConjunctionOperator', 2),
        (55, 'F'): ('ConjunctionOperator', 2),
        (55, 'FALSE'): ('ConjunctionOperator', 2),
        (55, 'G'): ('ConjunctionOperator', 2),
        (55, 'TRUE'): ('ConjunctionOperator', 2),
        (55, 'X'): ('ConjunctionOperator', 2),
        (55, '['): ('ConjunctionOperator', 2),
        (55, 'id'): ('ConjunctionOperator', 2),
        (55, 'next'): ('ConjunctionOperator', 2),
        (55, '~'): ('ConjunctionOperator', 2),
        (56, '!'): ('ConjunctionOperator', 1),
        (56, '('): ('ConjunctionOperator', 1),
        (56, '<'): ('ConjunctionOperator', 1),
        (56, 'F'): ('ConjunctionOperator', 1),
        (56, 'FALSE'): ('ConjunctionOperator', 1),
        (56, 'G'): ('ConjunctionOperator', 1),
        (56, 'TRUE'): ('ConjunctionOperator', 1),
        (56, 'X'): ('ConjunctionOperator', 1),
        (56, '['): ('ConjunctionOperator', 1),
        (56, 'id'): ('ConjunctionOperator', 1),
        (56, 'next'): ('ConjunctionOperator', 1),
        (56, '~'): ('ConjunctionOperator', 1),
        (57, '!'): ('ConjunctionOperator', 2),
        (57, '('): ('ConjunctionOperator', 2),
        (57, '<'): ('ConjunctionOperator', 2),
        (57, 'F'): ('ConjunctionOperator', 2),
        (57, 'FALSE'): ('ConjunctionOperator', 2),
        (57, 'G'): ('ConjunctionOperator', 2),
        (57, 'TRUE'): ('ConjunctionOperator', 2),
        (57, 'X'): ('ConjunctionOperator', 2),
        (57, '['): ('ConjunctionOperator', 2),
        (57, 'id'): ('ConjunctionOperator', 2),
        (57, 'next'): ('ConjunctionOperator', 2),
        (57, '~'): ('ConjunctionOperator', 2), (58, '!'): ('XorOperator', 1),
        (58, '('): ('XorOperator', 1), (58, '<'): ('XorOperator', 1),
        (58, 'F'): ('XorOperator', 1), (58, 'FALSE'): ('XorOperator', 1),
        (58, 'G'): ('XorOperator', 1), (58, 'TRUE'): ('XorOperator', 1),
        (58, 'X'): ('XorOperator', 1), (58, '['): ('XorOperator', 1),
        (58, 'id'): ('XorOperator', 1), (58, 'next'): ('XorOperator', 1),
        (58, '~'): ('XorOperator', 1), (59, '!'): ('UnaryTemporalOperator', 1),
        (59, '('): ('UnaryTemporalOperator', 1),
        (59, '<'): ('UnaryTemporalOperator', 1),
        (59, 'F'): ('UnaryTemporalOperator', 1),
        (59, 'FALSE'): ('UnaryTemporalOperator', 1),
        (59, 'G'): ('UnaryTemporalOperator', 1),
        (59, 'TRUE'): ('UnaryTemporalOperator', 1),
        (59, 'X'): ('UnaryTemporalOperator', 1),
        (59, '['): ('UnaryTemporalOperator', 1),
        (59, 'id'): ('UnaryTemporalOperator', 1),
        (59, 'next'): ('UnaryTemporalOperator', 1),
        (59, '~'): ('UnaryTemporalOperator', 1),
        (60, '!'): ('UnaryTemporalOperator', 1),
        (60, '('): ('UnaryTemporalOperator', 1),
        (60, '<'): ('UnaryTemporalOperator', 1),
        (60, 'F'): ('UnaryTemporalOperator', 1),
        (60, 'FALSE'): ('UnaryTemporalOperator', 1),
        (60, 'G'): ('UnaryTemporalOperator', 1),
        (60, 'TRUE'): ('UnaryTemporalOperator', 1),
        (60, 'X'): ('UnaryTemporalOperator', 1),
        (60, '['): ('UnaryTemporalOperator', 1),
        (60, 'id'): ('UnaryTemporalOperator', 1),
        (60, 'next'): ('UnaryTemporalOperator', 1),
        (60, '~'): ('UnaryTemporalOperator', 1),
        (61, '!'): ('UnaryTemporalOperator', 1),
        (61, '('): ('UnaryTemporalOperator', 1),
        (61, '<'): ('UnaryTemporalOperator', 1),
        (61, 'F'): ('UnaryTemporalOperator', 1),
        (61, 'FALSE'): ('UnaryTemporalOperator', 1),
        (61, 'G'): ('UnaryTemporalOperator', 1),
        (61, 'TRUE'): ('UnaryTemporalOperator', 1),
        (61, 'X'): ('UnaryTemporalOperator', 1),
        (61, '['): ('UnaryTemporalOperator', 1),
        (61, 'id'): ('UnaryTemporalOperator', 1),
        (61, 'next'): ('UnaryTemporalOperator', 1),
        (61, '~'): ('UnaryTemporalOperator', 1),
        (62, '!'): ('UnaryTemporalOperator', 1),
        (62, '('): ('UnaryTemporalOperator', 1),
        (62, '<'): ('UnaryTemporalOperator', 1),
        (62, 'F'): ('UnaryTemporalOperator', 1),
        (62, 'FALSE'): ('UnaryTemporalOperator', 1),
        (62, 'G'): ('UnaryTemporalOperator', 1),
        (62, 'TRUE'): ('UnaryTemporalOperator', 1),
        (62, 'X'): ('UnaryTemporalOperator', 1),
        (62, '['): ('UnaryTemporalOperator', 1),
        (62, 'id'): ('UnaryTemporalOperator', 1),
        (62, 'next'): ('UnaryTemporalOperator', 1),
        (62, '~'): ('UnaryTemporalOperator', 1),
        (64, '!'): ('FinallyOperator', 2), (64, '('): ('FinallyOperator', 2),
        (64, '<'): ('FinallyOperator', 2), (64, 'F'): ('FinallyOperator', 2),
        (64, 'FALSE'): ('FinallyOperator', 2),
        (64, 'G'): ('FinallyOperator', 2),
        (64, 'TRUE'): ('FinallyOperator', 2),
        (64, 'X'): ('FinallyOperator', 2), (64, '['): ('FinallyOperator', 2),
        (64, 'id'): ('FinallyOperator', 2),
        (64, 'next'): ('FinallyOperator', 2),
        (64, '~'): ('FinallyOperator', 2), (65, '!'): ('FinallyOperator', 1),
        (65, '('): ('FinallyOperator', 1), (65, '<'): ('FinallyOperator', 1),
        (65, 'F'): ('FinallyOperator', 1),
        (65, 'FALSE'): ('FinallyOperator', 1),
        (65, 'G'): ('FinallyOperator', 1),
        (65, 'TRUE'): ('FinallyOperator', 1),
        (65, 'X'): ('FinallyOperator', 1), (65, '['): ('FinallyOperator', 1),
        (65, 'id'): ('FinallyOperator', 1),
        (65, 'next'): ('FinallyOperator', 1),
        (65, '~'): ('FinallyOperator', 1), (66, '!'): ('NextOperator', 2),
        (66, '('): ('NextOperator', 2), (66, '<'): ('NextOperator', 2),
        (66, 'F'): ('NextOperator', 2), (66, 'FALSE'): ('NextOperator', 2),
        (66, 'G'): ('NextOperator', 2), (66, 'TRUE'): ('NextOperator', 2),
        (66, 'X'): ('NextOperator', 2), (66, '['): ('NextOperator', 2),
        (66, 'id'): ('NextOperator', 2), (66, 'next'): ('NextOperator', 2),
        (66, '~'): ('NextOperator', 2), (67, '!'): ('NextOperator', 1),
        (67, '('): ('NextOperator', 1), (67, '<'): ('NextOperator', 1),
        (67, 'F'): ('NextOperator', 1), (67, 'FALSE'): ('NextOperator', 1),
        (67, 'G'): ('NextOperator', 1), (67, 'TRUE'): ('NextOperator', 1),
        (67, 'X'): ('NextOperator', 1), (67, '['): ('NextOperator', 1),
        (67, 'id'): ('NextOperator', 1), (67, 'next'): ('NextOperator', 1),
        (67, '~'): ('NextOperator', 1), (68, '!'): ('NextOperator', 1),
        (68, '('): ('NextOperator', 1), (68, '<'): ('NextOperator', 1),
        (68, 'F'): ('NextOperator', 1), (68, 'FALSE'): ('NextOperator', 1),
        (68, 'G'): ('NextOperator', 1), (68, 'TRUE'): ('NextOperator', 1),
        (68, 'X'): ('NextOperator', 1), (68, '['): ('NextOperator', 1),
        (68, 'id'): ('NextOperator', 1), (68, 'next'): ('NextOperator', 1),
        (68, '~'): ('NextOperator', 1), (69, '!'): ('GloballyOperator', 2),
        (69, '('): ('GloballyOperator', 2), (69, '<'): ('GloballyOperator', 2),
        (69, 'F'): ('GloballyOperator', 2),
        (69, 'FALSE'): ('GloballyOperator', 2),
        (69, 'G'): ('GloballyOperator', 2),
        (69, 'TRUE'): ('GloballyOperator', 2),
        (69, 'X'): ('GloballyOperator', 2), (69, '['): ('GloballyOperator', 2),
        (69, 'id'): ('GloballyOperator', 2),
        (69, 'next'): ('GloballyOperator', 2),
        (69, '~'): ('GloballyOperator', 2), (70, '!'): ('GloballyOperator', 1),
        (70, '('): ('GloballyOperator', 1), (70, '<'): ('GloballyOperator', 1),
        (70, 'F'): ('GloballyOperator', 1),
        (70, 'FALSE'): ('GloballyOperator', 1),
        (70, 'G'): ('GloballyOperator', 1),
        (70, 'TRUE'): ('GloballyOperator', 1),
        (70, 'X'): ('GloballyOperator', 1), (70, '['): ('GloballyOperator', 1),
        (70, 'id'): ('GloballyOperator', 1),
        (70, 'next'): ('GloballyOperator', 1),
        (70, '~'): ('GloballyOperator', 1), (71, '!'): ('NotOperator', 1),
        (71, '('): ('NotOperator', 1), (71, '<'): ('NotOperator', 1),
        (71, 'F'): ('NotOperator', 1), (71, 'FALSE'): ('NotOperator', 1),
        (71, 'G'): ('NotOperator', 1), (71, 'TRUE'): ('NotOperator', 1),
        (71, 'X'): ('NotOperator', 1), (71, '['): ('NotOperator', 1),
        (71, 'id'): ('NotOperator', 1), (71, 'next'): ('NotOperator', 1),
        (71, '~'): ('NotOperator', 1), (72, '!'): ('NotOperator', 1),
        (72, '('): ('NotOperator', 1), (72, '<'): ('NotOperator', 1),
        (72, 'F'): ('NotOperator', 1), (72, 'FALSE'): ('NotOperator', 1),
        (72, 'G'): ('NotOperator', 1), (72, 'TRUE'): ('NotOperator', 1),
        (72, 'X'): ('NotOperator', 1), (72, '['): ('NotOperator', 1),
        (72, 'id'): ('NotOperator', 1), (72, 'next'): ('NotOperator', 1),
        (72, '~'): ('NotOperator', 1), (73, '&'): ('Assignment', 1),
        (73, ')'): ('Assignment', 1), (73, '*'): ('Assignment', 1),
        (73, '+'): ('Assignment', 1), (73, '-'): ('Assignment', 1),
        (73, '/'): ('Assignment', 1), (73, ';'): ('Assignment', 1),
        (73, '<'): ('Assignment', 1), (73, 'U'): ('Assignment', 1),
        (73, 'W'): ('Assignment', 1), (73, '\\'): ('Assignment', 1),
        (73, ']'): ('Assignment', 1), (73, '^'): ('Assignment', 1),
        (73, '|'): ('Assignment', 1), (75, '&'): ('Assignment', 3),
        (75, ')'): ('Assignment', 3), (75, '*'): ('Assignment', 3),
        (75, '+'): ('Assignment', 3), (75, '-'): ('Assignment', 3),
        (75, '/'): ('Assignment', 3), (75, ';'): ('Assignment', 3),
        (75, '<'): ('Assignment', 3), (75, 'U'): ('Assignment', 3),
        (75, 'W'): ('Assignment', 3), (75, '\\'): ('Assignment', 3),
        (75, ']'): ('Assignment', 3), (75, '^'): ('Assignment', 3),
        (75, '|'): ('Assignment', 3), (76, '&'): ('Assignment', 3),
        (76, ')'): ('Assignment', 3), (76, '*'): ('Assignment', 3),
        (76, '+'): ('Assignment', 3), (76, '-'): ('Assignment', 3),
        (76, '/'): ('Assignment', 3), (76, ';'): ('Assignment', 3),
        (76, '<'): ('Assignment', 3), (76, 'U'): ('Assignment', 3),
        (76, 'W'): ('Assignment', 3), (76, '\\'): ('Assignment', 3),
        (76, ']'): ('Assignment', 3), (76, '^'): ('Assignment', 3),
        (76, '|'): ('Assignment', 3)
    }
    _goto = {
        (0, 'Assignment'): 30, (0, 'AtomicFormula'): 24,
        (0, 'Biimplication'): 2, (0, 'BinaryTemporalFormula'): 18,
        (0, 'Brackets'): 29, (0, 'Conjunction'): 15, (0, 'Disjunction'): 12,
        (0, 'FinallyOperator'): 59, (0, 'Formula'): 1,
        (0, 'GloballyOperator'): 61, (0, 'Implication'): 4,
        (0, 'NextOperator'): 60, (0, 'NotOperator'): 62,
        (0, 'UnaryFormula'): 21, (0, 'UnaryTemporalOperator'): 25,
        (0, 'Xor'): 9, (2, 'BiimplicationOperator'): 7,
        (4, 'ImplicationOperator'): 10, (5, 'BiimplicationOperator'): 7,
        (6, 'BiimplicationOperator'): 7, (7, 'Assignment'): 30,
        (7, 'AtomicFormula'): 24, (7, 'BinaryTemporalFormula'): 18,
        (7, 'Brackets'): 29, (7, 'Conjunction'): 15, (7, 'Disjunction'): 12,
        (7, 'FinallyOperator'): 59, (7, 'GloballyOperator'): 61,
        (7, 'Implication'): 8, (7, 'NextOperator'): 60, (7, 'NotOperator'): 62,
        (7, 'UnaryFormula'): 21, (7, 'UnaryTemporalOperator'): 25,
        (7, 'Xor'): 9, (8, 'ImplicationOperator'): 10, (9, 'XorOperator'): 13,
        (10, 'Assignment'): 30, (10, 'AtomicFormula'): 24,
        (10, 'BinaryTemporalFormula'): 18, (10, 'Brackets'): 29,
        (10, 'Conjunction'): 15, (10, 'Disjunction'): 12,
        (10, 'FinallyOperator'): 59, (10, 'GloballyOperator'): 61,
        (10, 'NextOperator'): 60, (10, 'NotOperator'): 62,
        (10, 'UnaryFormula'): 21, (10, 'UnaryTemporalOperator'): 25,
        (10, 'Xor'): 11, (11, 'XorOperator'): 13,
        (12, 'DisjunctionOperator'): 16, (13, 'Assignment'): 30,
        (13, 'AtomicFormula'): 24, (13, 'BinaryTemporalFormula'): 18,
        (13, 'Brackets'): 29, (13, 'Conjunction'): 15, (13, 'Disjunction'): 14,
        (13, 'FinallyOperator'): 59, (13, 'GloballyOperator'): 61,
        (13, 'NextOperator'): 60, (13, 'NotOperator'): 62,
        (13, 'UnaryFormula'): 21, (13, 'UnaryTemporalOperator'): 25,
        (14, 'DisjunctionOperator'): 16, (15, 'ConjunctionOperator'): 19,
        (16, 'Assignment'): 30, (16, 'AtomicFormula'): 24,
        (16, 'BinaryTemporalFormula'): 18, (16, 'Brackets'): 29,
        (16, 'Conjunction'): 17, (16, 'FinallyOperator'): 59,
        (16, 'GloballyOperator'): 61, (16, 'NextOperator'): 60,
        (16, 'NotOperator'): 62, (16, 'UnaryFormula'): 21,
        (16, 'UnaryTemporalOperator'): 25, (17, 'ConjunctionOperator'): 19,
        (18, 'BinaryTemporalOperator'): 22, (18, 'UntilOperator'): 35,
        (18, 'WeakUntilOperator'): 36, (19, 'Assignment'): 30,
        (19, 'AtomicFormula'): 24, (19, 'BinaryTemporalFormula'): 20,
        (19, 'Brackets'): 29, (19, 'FinallyOperator'): 59,
        (19, 'GloballyOperator'): 61, (19, 'NextOperator'): 60,
        (19, 'NotOperator'): 62, (19, 'UnaryFormula'): 21,
        (19, 'UnaryTemporalOperator'): 25, (20, 'BinaryTemporalOperator'): 22,
        (20, 'UntilOperator'): 35, (20, 'WeakUntilOperator'): 36,
        (22, 'Assignment'): 30, (22, 'AtomicFormula'): 24,
        (22, 'Brackets'): 29, (22, 'FinallyOperator'): 59,
        (22, 'GloballyOperator'): 61, (22, 'NextOperator'): 60,
        (22, 'NotOperator'): 62, (22, 'UnaryFormula'): 23,
        (22, 'UnaryTemporalOperator'): 25, (25, 'Assignment'): 30,
        (25, 'AtomicFormula'): 24, (25, 'Brackets'): 29,
        (25, 'FinallyOperator'): 59, (25, 'GloballyOperator'): 61,
        (25, 'NextOperator'): 60, (25, 'NotOperator'): 62,
        (25, 'UnaryFormula'): 26, (25, 'UnaryTemporalOperator'): 25,
        (31, 'Assignment'): 30, (31, 'AtomicFormula'): 24,
        (31, 'Biimplication'): 6, (31, 'BinaryTemporalFormula'): 18,
        (31, 'Brackets'): 29, (31, 'Conjunction'): 15, (31, 'Disjunction'): 12,
        (31, 'FinallyOperator'): 59, (31, 'GloballyOperator'): 61,
        (31, 'Implication'): 4, (31, 'NextOperator'): 60,
        (31, 'NotOperator'): 62, (31, 'UnaryFormula'): 21,
        (31, 'UnaryTemporalOperator'): 25, (31, 'Xor'): 9,
        (33, 'Assignment'): 30, (33, 'AtomicFormula'): 24,
        (33, 'Biimplication'): 5, (33, 'BinaryTemporalFormula'): 18,
        (33, 'Brackets'): 29, (33, 'Conjunction'): 15, (33, 'Disjunction'): 12,
        (33, 'FinallyOperator'): 59, (33, 'GloballyOperator'): 61,
        (33, 'Implication'): 4, (33, 'NextOperator'): 60,
        (33, 'NotOperator'): 62, (33, 'UnaryFormula'): 21,
        (33, 'UnaryTemporalOperator'): 25, (33, 'Xor'): 9
    }
    _shift = {
        (0, '!'): 71, (0, '('): 31, (0, '<'): 63, (0, 'F'): 65,
        (0, 'FALSE'): 27, (0, 'G'): 70, (0, 'TRUE'): 28, (0, 'X'): 68,
        (0, '['): 33, (0, 'id'): 73, (0, 'next'): 67, (0, '~'): 72,
        (1, EOF): 77, (2, ';'): 3, (2, '<'): 43, (4, '-'): 39, (5, '<'): 43,
        (5, ']'): 34, (6, ')'): 32, (6, '<'): 43, (7, '!'): 71, (7, '('): 31,
        (7, '<'): 63, (7, 'F'): 65, (7, 'FALSE'): 27, (7, 'G'): 70,
        (7, 'TRUE'): 28, (7, 'X'): 68, (7, '['): 33, (7, 'id'): 73,
        (7, 'next'): 67, (7, '~'): 72, (8, '-'): 39, (9, '^'): 58,
        (10, '!'): 71, (10, '('): 31, (10, '<'): 63, (10, 'F'): 65,
        (10, 'FALSE'): 27, (10, 'G'): 70, (10, 'TRUE'): 28, (10, 'X'): 68,
        (10, '['): 33, (10, 'id'): 73, (10, 'next'): 67, (10, '~'): 72,
        (11, '^'): 58, (12, '+'): 48, (12, '\\'): 49, (12, '|'): 51,
        (13, '!'): 71, (13, '('): 31, (13, '<'): 63, (13, 'F'): 65,
        (13, 'FALSE'): 27, (13, 'G'): 70, (13, 'TRUE'): 28, (13, 'X'): 68,
        (13, '['): 33, (13, 'id'): 73, (13, 'next'): 67, (13, '~'): 72,
        (14, '+'): 48, (14, '\\'): 49, (14, '|'): 51, (15, '&'): 56,
        (15, '*'): 53, (15, '/'): 54, (16, '!'): 71, (16, '('): 31,
        (16, '<'): 63, (16, 'F'): 65, (16, 'FALSE'): 27, (16, 'G'): 70,
        (16, 'TRUE'): 28, (16, 'X'): 68, (16, '['): 33, (16, 'id'): 73,
        (16, 'next'): 67, (16, '~'): 72, (17, '&'): 56, (17, '*'): 53,
        (17, '/'): 54, (18, 'U'): 37, (18, 'W'): 38, (19, '!'): 71,
        (19, '('): 31, (19, '<'): 63, (19, 'F'): 65, (19, 'FALSE'): 27,
        (19, 'G'): 70, (19, 'TRUE'): 28, (19, 'X'): 68, (19, '['): 33,
        (19, 'id'): 73, (19, 'next'): 67, (19, '~'): 72, (20, 'U'): 37,
        (20, 'W'): 38, (22, '!'): 71, (22, '('): 31, (22, '<'): 63,
        (22, 'F'): 65, (22, 'FALSE'): 27, (22, 'G'): 70, (22, 'TRUE'): 28,
        (22, 'X'): 68, (22, '['): 33, (22, 'id'): 73, (22, 'next'): 67,
        (22, '~'): 72, (25, '!'): 71, (25, '('): 31, (25, '<'): 63,
        (25, 'F'): 65, (25, 'FALSE'): 27, (25, 'G'): 70, (25, 'TRUE'): 28,
        (25, 'X'): 68, (25, '['): 33, (25, 'id'): 73, (25, 'next'): 67,
        (25, '~'): 72, (31, '!'): 71, (31, '('): 31, (31, ')'): 66,
        (31, '<'): 63, (31, 'F'): 65, (31, 'FALSE'): 27, (31, 'G'): 70,
        (31, 'TRUE'): 28, (31, 'X'): 68, (31, '['): 33, (31, 'id'): 73,
        (31, 'next'): 67, (31, '~'): 72, (33, '!'): 71, (33, '('): 31,
        (33, '<'): 63, (33, 'F'): 65, (33, 'FALSE'): 27, (33, 'G'): 70,
        (33, 'TRUE'): 28, (33, 'X'): 68, (33, '['): 33, (33, ']'): 69,
        (33, 'id'): 73, (33, 'next'): 67, (33, '~'): 72, (39, '-'): 40,
        (39, '>'): 42, (40, '>'): 41, (43, '-'): 44, (44, '-'): 45,
        (44, '>'): 47, (45, '>'): 46, (49, '/'): 50, (51, '|'): 52,
        (54, '\\'): 55, (56, '&'): 57, (63, '>'): 64, (73, '='): 74,
        (74, '0'): 75, (74, '1'): 76
    }

    def __init__(self, max_err=None, errcorr_pre=4, errcorr_post=4):
        """Create a new parser instance.

        The constructor arguments are all optional, they control the
        handling of parse errors: `max_err` can be given to bound the
        number of errors reported during one run of the parser.
        `errcorr_pre` controls how many tokens before an invalid token
        the parser considers when trying to repair the input.
        `errcorr_post` controls how far beyond an invalid token the
        parser reads when evaluating the quality of an attempted
        repair.
        """
        self.max_err = max_err
        self.m = errcorr_pre
        self.n = errcorr_post

    @staticmethod
    def leaves(tree):
        """Iterate over the leaves of a parse tree.

        This function can be used to reconstruct the input from a
        parse tree.
        """
        if tree[0] in Parser.terminals:
            yield tree
        else:
            for x in tree[1:]:
                for t in Parser.leaves(x):
                    yield t

    def _parse(self, input, stack, state):
        """Internal function to construct a parse tree.

        'Input' is the input token stream, 'stack' is the inital stack
        and 'state' is the inital state of the automaton.

        Returns a 4-tuple (done, count, state, error).  'done' is a
        boolean indicationg whether parsing is completed, 'count' is
        number of successfully shifted tokens, and 'error' is None on
        success or else the first token which could not be parsed.
        """
        read_next = True
        count = 0
        while state != self._halting_state:
            if read_next:
                try:
                    lookahead = input.next()
                except StopIteration:
                    return (False,count,state,None)
                read_next = False
            token = lookahead[0]

            if (state,token) in self._shift:
                stack.append((state,lookahead))
                state = self._shift[(state,token)]
                read_next = True
                count += 1
            elif (state,token) in self._reduce:
                X,n = self._reduce[(state,token)]
                if n > 0:
                    state = stack[-n][0]
                    tree = (X,) + tuple(s[1] for s in stack[-n:])
                    del stack[-n:]
                else:
                    tree = (X,)
                stack.append((state,tree))
                state = self._goto[(state,X)]
            else:
                return (False,count,state,lookahead)
        return (True,count,state,None)

    def _try_parse(self, input, stack, state):
        count = 0
        while state != self._halting_state and count < len(input):
            token = input[count][0]

            if (state,token) in self._shift:
                stack.append(state)
                state = self._shift[(state,token)]
                count += 1
            elif (state,token) in self._reduce:
                X,n = self._reduce[(state,token)]
                if n > 0:
                    state = stack[-n]
                    del stack[-n:]
                stack.append(state)
                state = self._goto[(state,X)]
            else:
                break
        return count

    def parse(self, input):
        """Parse the tokens from `input` and construct a parse tree.

        `input` must be an interable over tuples.  The first element
        of each tuple must be a terminal symbol of the grammar which
        is used for parsing.  All other element of the tuple are just
        copied into the constructed parse tree.

        If `input` is invalid, a ParseErrors exception is raised.
        Otherwise the function returns the parse tree.
        """
        errors = []
        input = chain(input, [(self.EOF,)])
        stack = []
        state = 0
        while True:
            done,_,state,lookahead = self._parse(input, stack, state)
            if done:
                break

            expect = [ t for s,t in self._reduce.keys()+self._shift.keys()
                       if s == state ]
            errors.append((lookahead, expect))
            if self.max_err is not None and len(errors) >= self.max_err:
                raise self.ParseErrors(errors, None)

            queue = []
            def split_input(m, stack, lookahead, input, queue):
                for s in stack:
                    for t in self.leaves(s[1]):
                        queue.append(t)
                        if len(queue) > m:
                            yield queue.pop(0)
                queue.append(lookahead)
            in2 = split_input(self.m, stack, lookahead, input, queue)
            stack = []
            done,_,state,lookahead = self._parse(in2, stack, 0)
            m = len(queue)
            for i in range(0, self.n):
                try:
                    queue.append(input.next())
                except StopIteration:
                    break

            def vary_queue(queue, m):
                for i in range(m-1, -1, -1):
                    for t in self.terminals:
                        yield queue[:i]+[(t,)]+queue[i:]
                    if queue[i][0] == self.EOF:
                        continue
                    for t in self.terminals:
                        if t == queue[i]:
                            continue
                        yield queue[:i]+[(t,)]+queue[i+1:]
                    yield queue[:i]+queue[i+1:]
            best_val = len(queue)-m+1
            best_queue = queue
            for q2 in vary_queue(queue, m):
                pos = self._try_parse(q2, [ s[0] for s in stack ], state)
                val = len(q2) - pos
                if val < best_val:
                    best_val = val
                    best_queue = q2
                    if val == len(q2):
                        break
            if best_val >= len(queue)-m+1:
                raise self.ParseErrors(errors, None)
            input = chain(best_queue, input)

        tree = stack[0][1]
        if errors:
            raise self.ParseErrors(errors, tree)
        return tree
