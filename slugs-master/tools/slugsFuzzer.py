#!/usr/bin/python
#
# Does FUZZ-Tests on slugs, i.e., checks whether a specification is realizable or not, and checks the implementation in case
# of a positive answer
#
# May not work on windows (because of using a timeout to run NuSMV due to os.system() return code formatting)

import random
import os
import sys
import subprocess, md5, time

# =====================================================
# Difficulty Options
# =====================================================
nofAPsPerType = 3
probabilityPerProperty = 0.6

# =====================================================
# Execution Options
# =====================================================
ltlFile = "/tmp/fuzz_"+str(os.getpid())+".ltl"
smvFile = "/tmp/fuzz_"+str(os.getpid())+".smv"
slugsinFile = "/tmp/fuzz_"+str(os.getpid())+".slugsin"
nuSMVFile = "/tmp/fuzz_"+str(os.getpid())+".nusmv"
autFile = "/tmp/fuzz_"+str(os.getpid())+".aut"
slugsReturnFile = "/tmp/fuzz_"+str(os.getpid())+".slugsreturn"
nuSMVReturnFile = "/tmp/fuzz_"+str(os.getpid())+".nusmvreturn"
nuSMVErrorStreamFile = "/tmp/fuzz_"+str(os.getpid())+".nusmverrorstream"
slugsTranslatorScript = "./translateFromLTLMopLTLFormatToSlugsFormat.py"
nuSMVTranslatorScript = "./makeNuSMVInstanceToTestAutomatonFileAgainstSlugsSpecification.py"
counterExampleTraceGeneratorScript = "./computeBoundedLengthUniformSafetyCounterStrategy.py"
NuSMVExecutable = "./NuSMV"
slugsExecutableAndBasicOptions = "../src/slugs " + " ".join(sys.argv[2:])

# =====================================================
# =====================================================
# Main function for doing one fuzz test.
# =====================================================
# =====================================================
def fuzzOnce():
    # =====================================================
    # Generate SMV file
    # =====================================================
    out = open(smvFile,"w")
    out.write("-- Skeleton SMV file\n-- (Generated by the Fuzzer) \n\nMODULE main\n    VAR\n        e : env();\n        s : sys();\n\nMODULE env -- inputs\n    VAR\n")
    for i in xrange(0,nofAPsPerType):
        out.write("		in"+str(i)+" : boolean;\n")
    out.write("MODULE sys -- outputs\n    VAR\n")
    for i in xrange(0,nofAPsPerType):
        out.write("		out"+str(i)+" : boolean;\n")
    out.close()

    # =====================================================
    # Generate LTL file
    # =====================================================

    # Recursive specification generator
    def makeAProperty(apsUsableWithoutNext,apsUsableWithNext):
        ops = ["!","next","&","|","AP","AP","TRUE"]
        op = random.choice(ops)
        while ((op=="next") and (len(apsUsableWithNext)==0)):
            op = random.choice(ops)

        if (op=="!"):
            return "!"+makeAProperty(apsUsableWithoutNext,apsUsableWithNext)
        elif (op=="next"):
            return "next("+makeAProperty(apsUsableWithNext,[])+")"
        elif (op=="&"):
            return "(("+makeAProperty(apsUsableWithoutNext,apsUsableWithNext)+")&("+makeAProperty(apsUsableWithoutNext,apsUsableWithNext)+"))"
        elif (op=="|"):
            return "(("+makeAProperty(apsUsableWithoutNext,apsUsableWithNext)+")|("+makeAProperty(apsUsableWithoutNext,apsUsableWithNext)+"))"
        elif (op=="AP"):
            if len(apsUsableWithoutNext)>0:
                return random.choice(apsUsableWithoutNext)

        # Nothing else? Then it shall be "TRUE"
        return "TRUE"

    # Create AP lists
    apsInput = ["e.in"+str(i) for i in xrange(0,nofAPsPerType)]
    apsOutput = ["s.out"+str(i) for i in xrange(0,nofAPsPerType)]

    out = open(ltlFile,"w")
    out.write("LTLSPEC -- Assumptions\n	( \n		TRUE  ")
    # Init assumptions
    while random.random() < probabilityPerProperty:
        out.write("  &  []("+makeAProperty(apsInput,[])+")\n")
    # Safety assumptions
    while random.random() < probabilityPerProperty:
        out.write("  &  []("+makeAProperty(apsInput+apsOutput,apsInput)+")\n")
    # Liveness assumptions
    while random.random() < probabilityPerProperty:
        out.write("  &  []<>("+makeAProperty(apsInput+apsOutput,[])+")\n")

    out.write(");\n")
    out.write("LTLSPEC -- Guarantees\n	( \n		TRUE  ")
    # Init assumptions
    while random.random() < probabilityPerProperty:
        out.write("  &  []("+makeAProperty(apsInput+apsOutput,[])+")\n")
    # Safety assumptions
    while random.random() < probabilityPerProperty:
        out.write("  &  []("+makeAProperty(apsInput+apsOutput,apsInput+apsOutput)+")\n")
    # Liveness assumptions
    while random.random() < probabilityPerProperty:
        out.write("  &  []<>("+makeAProperty(apsInput+apsOutput,[])+")\n")
    out.write(");\n")
    out.close()


    # =====================================================
    # Translate
    # =====================================================
    retValue = os.system(slugsTranslatorScript+" "+smvFile+" "+ltlFile+" > "+slugsinFile)
    if (retValue!=0):
        print >>sys.stderr, "Translation from SMV/LTL file to Slugs file failed. Are you running this script from the correct directory?"
        raise Exception("Fuzzing Aborted")

    # =====================================================
    # Slugs
    # =====================================================
    command = slugsExecutableAndBasicOptions + " --sysInitRoboticsSemantics --explicitStrategy"+slugsinFile+" "+autFile+" 2> "+slugsReturnFile
    retValue = os.system(command)
    if (retValue!=0):
        print >>sys.stderr, "Slugs failed!"
        raise Exception("Fuzzing Aborted")

    realizable = None
    slugsReturn = open(slugsReturnFile,"r")
    for line in slugsReturn.readlines():
        if line.strip() == "RESULT: Specification is unrealizable.":
            realizable = False
        elif line.strip() == "RESULT: Specification is realizable.":
            realizable = True
    slugsReturn.close()

    if realizable == None:
        print >>sys.stderr, "Slugs did not tell us if the specification is realizable or not!"
        raise Exception("Fuzzing Aborted")

    if realizable:
        # =====================================================
        # NuSMV translate
        # =====================================================
        retValue = os.system(nuSMVTranslatorScript+" "+slugsinFile+" "+autFile+" "+nuSMVFile)
        if (retValue!=0):
            print >>sys.stderr, "Translation to NuSMV failed!"
            raise Exception("Fuzzing Aborted")

        # =====================================================
        # NuSMV (without BMC, add '-bmc -bmc_length ' for this.
        # =====================================================
        retValue = os.system("timeout 120s "+NuSMVExecutable + " "+nuSMVFile+" > "+nuSMVReturnFile+" 2> "+nuSMVErrorStreamFile)
        if (retValue!=0):
            # Timeout (Code 124 according to the "timeout" man page)? Then we are fine!
            if (retValue/256) != 124:
                print >>sys.stderr, "NuSMV failed!"
                raise Exception("Fuzzing Aborted")
        else:
            # Check what we found....
            nusmvReturn = open(nuSMVReturnFile,"r")
            for line in nusmvReturn.readlines():
                if line.startswith("*"):
                    # Information about NuSMV                
                    pass
                elif line.startswith("-"):
                    # Comments, such as which bound is being processed
                    pass
                elif line.strip()!="":
                    print "Test failed!: "+line
                    raise Exception("Fuzzing Aborted")
            nusmvReturn.close()

    else:
        retValue = os.system("timeout 120s "+NuSMVExecutable + " "+nuSMVFile+" > "+nuSMVReturnFile+" 2> "+nuSMVErrorStreamFile)

        # Check if a counter-example can be computed


# =====================================================
# Run as main program
# =====================================================
if __name__ == "__main__":

    # Take random seed from the terminal if it exists, otherwise make up one
    if len(sys.argv)>1:
        seed = sys.argv[1]
    else:
        seed = md5.md5(time.ctime()+str(os.getpid())).digest().encode("hex")
    print "Fuzzing Slugs. Process ID: "+str(os.getpid())+", Seed: "+seed
    random.seed(seed)

    # Start fuzzing    
    while True:
        fuzzOnce()
        sys.stdout.write(".")
        sys.stdout.flush()
