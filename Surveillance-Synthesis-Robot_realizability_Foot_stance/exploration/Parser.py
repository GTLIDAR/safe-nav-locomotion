# LR(1) parser, autogenerated on 2014-09-03 19:11:58
# generator: wisent 0.6.2, http://seehuhn.de/pages/wisent
# source: grammar.wi

# All parts of this file which are not taken verbatim from the input grammar
# are covered by the following notice:
#
# Copyright (C) 2008, 2009  Jochen Voss <voss@seehuhn.de>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#   3. The name of the author may not be used to endorse or promote
#      products derived from this software without specific prior
#      written permission.
#
# This software is provided by the author "as is" and any express or
# implied warranties, including, but not limited to, the implied
# warranties of merchantability and fitness for a particular purpose
# are disclaimed.  In no event shall the author be liable for any
# direct, indirect, incidental, special, exemplary, or consequential
# damages (including, but not limited to, procurement of substitute
# goods or services; loss of use, data, or profits; or business
# interruption) however caused and on any theory of liability, whether
# in contract, strict liability, or tort (including negligence or
# otherwise) arising in any way out of the use of this software, even
# if advised of the possibility of such damage.

from itertools import chain

class Unique(object):

    """Unique objects for use as markers.

    These objects are internally used to represent the start symbol
    and the end-of-input marker of the grammar.
    """

    def __init__(self, label):
        """Create a new unique object.

        `label` is a string which is used as a textual representation
        of the object.
        """
        self.label = label

    def __repr__(self):
        """Return the `label` given at object construction."""
        return self.label

class Parser(object):

    """LR(1) parser class.

    terminal symbols:
      '!', '&', '(', ')', '*', '+', '-', '/', '<', '=', '>', 'F', 'FALSE', 'G',
      'LEASTSIGNIFICANTBITOVERWRITES', 'SubtractionOperator', 'TRUE', 'U', 'W',
      'X', '[', '\\', ']', '^', 'boolID', 'next', 'numID', 'numeral', '|', '~'

    nonterminal symbols:
      'AdditionOperator', 'Assignment', 'AtomicFormula',
      'AtomicNumberExpression', 'Biimplication', 'BiimplicationOperator',
      'BinaryTemporalFormula', 'BinaryTemporalOperator',
      'BooleanAtomicFormula', 'Brackets', 'CalculationSubformula',
      'Conjunction', 'ConjunctionOperator', 'Disjunction',
      'DisjunctionOperator', 'EqualOperator', 'FinallyOperator', 'Formula',
      'GloballyOperator', 'GreaterEqualOperator', 'GreaterOperator',
      'Implication', 'ImplicationOperator',
      'LeastSignificantBitOverwriteExpression',
      'LeastSignificantBitOverwriteOperator', 'MultiplicationOperator',
      'MultiplicativeNumber', 'NextOperator', 'NotOperator', 'NumberBrackets',
      'NumberComparisonOperator', 'NumberExpression', 'SmallerEqualOperator',
      'SmallerOperator', 'UnaryFormula', 'UnaryTemporalOperator',
      'UnequalOperator', 'UntilOperator', 'WeakUntilOperator', 'Xor',
      'XorOperator'

    production rules:
      'Formula' -> 'Biimplication'
      'Biimplication' -> 'Implication'
      'Biimplication' -> 'Biimplication' 'BiimplicationOperator' 'Implication'
      'Implication' -> 'Xor'
      'Implication' -> 'Implication' 'ImplicationOperator' 'Xor'
      'Xor' -> 'Disjunction'
      'Xor' -> 'Xor' 'XorOperator' 'Disjunction'
      'Disjunction' -> 'Conjunction'
      'Disjunction' -> 'Disjunction' 'DisjunctionOperator' 'Conjunction'
      'Conjunction' -> 'BinaryTemporalFormula'
      'Conjunction' -> 'Conjunction' 'ConjunctionOperator' 'BinaryTemporalFormula'
      'BinaryTemporalFormula' -> 'UnaryFormula'
      'BinaryTemporalFormula' -> 'BinaryTemporalFormula' 'BinaryTemporalOperator' 'UnaryFormula'
      'UnaryFormula' -> 'AtomicFormula'
      'UnaryFormula' -> 'UnaryTemporalOperator' 'UnaryFormula'
      'AtomicFormula' -> 'FALSE'
      'AtomicFormula' -> 'TRUE'
      'AtomicFormula' -> 'Brackets'
      'AtomicFormula' -> 'BooleanAtomicFormula'
      'Brackets' -> '(' 'Biimplication' ')'
      'Brackets' -> '[' 'Biimplication' ']'
      'BooleanAtomicFormula' -> 'Assignment'
      'BooleanAtomicFormula' -> 'CalculationSubformula'
      'Assignment' -> 'boolID'
      'CalculationSubformula' -> 'NumberExpression' 'NumberComparisonOperator' 'NumberExpression'
      'NumberExpression' -> 'MultiplicativeNumber'
      'NumberExpression' -> 'MultiplicativeNumber' 'AdditionOperator' 'NumberExpression'
      'NumberExpression' -> 'MultiplicativeNumber' 'SubtractionOperator' 'NumberExpression'
      'MultiplicativeNumber' -> 'LeastSignificantBitOverwriteExpression'
      'MultiplicativeNumber' -> 'LeastSignificantBitOverwriteExpression' 'MultiplicationOperator' 'LeastSignificantBitOverwriteExpression'
      'LeastSignificantBitOverwriteExpression' -> 'AtomicNumberExpression'
      'LeastSignificantBitOverwriteExpression' -> 'AtomicNumberExpression' 'LeastSignificantBitOverwriteOperator' 'AtomicNumberExpression'
      'AtomicNumberExpression' -> 'numID'
      'AtomicNumberExpression' -> 'numeral'
      'AtomicNumberExpression' -> 'NumberBrackets'
      'NumberBrackets' -> '(' 'NumberExpression' ')'
      'BinaryTemporalOperator' -> 'UntilOperator'
      'BinaryTemporalOperator' -> 'WeakUntilOperator'
      'UntilOperator' -> 'U'
      'WeakUntilOperator' -> 'W'
      'ImplicationOperator' -> '-' '-' '>'
      'ImplicationOperator' -> '-' '>'
      'BiimplicationOperator' -> '<' '-' '-' '>'
      'BiimplicationOperator' -> '<' '-' '>'
      'DisjunctionOperator' -> '\\' '/'
      'DisjunctionOperator' -> '|'
      'DisjunctionOperator' -> '|' '|'
      'ConjunctionOperator' -> '/' '\\'
      'ConjunctionOperator' -> '&'
      'ConjunctionOperator' -> '&' '&'
      'NumberComparisonOperator' -> 'GreaterOperator'
      'NumberComparisonOperator' -> 'EqualOperator'
      'NumberComparisonOperator' -> 'UnequalOperator'
      'NumberComparisonOperator' -> 'GreaterEqualOperator'
      'NumberComparisonOperator' -> 'SmallerEqualOperator'
      'NumberComparisonOperator' -> 'SmallerOperator'
      'GreaterOperator' -> '>'
      'SmallerOperator' -> '<'
      'EqualOperator' -> '='
      'UnequalOperator' -> '!' '='
      'SmallerEqualOperator' -> '<' '='
      'GreaterEqualOperator' -> '>' '='
      'AdditionOperator' -> '+'
      'MultiplicationOperator' -> '*'
      'LeastSignificantBitOverwriteOperator' -> 'LEASTSIGNIFICANTBITOVERWRITES'
      'XorOperator' -> '^'
      'UnaryTemporalOperator' -> 'FinallyOperator'
      'UnaryTemporalOperator' -> 'NextOperator'
      'UnaryTemporalOperator' -> 'GloballyOperator'
      'UnaryTemporalOperator' -> 'NotOperator'
      'FinallyOperator' -> '<' '>'
      'FinallyOperator' -> 'F'
      'NextOperator' -> '(' ')'
      'NextOperator' -> 'next'
      'NextOperator' -> 'X'
      'GloballyOperator' -> '[' ']'
      'GloballyOperator' -> 'G'
      'NotOperator' -> '!'
      'NotOperator' -> '~'
    """

    class ParseErrors(Exception):

        """Exception class to represent a collection of parse errors.

        Instances of this class have two attributes, `errors` and `tree`.
        `errors` is a list of tuples, each describing one error.
        Each tuple consists of the first input token which could not
        be processed and the list of grammar symbols which were allowed
        at this point.
        `tree` is a "repaired" parse tree which might be used for further
        error checking, or `None` if no repair was possible.
        """

        def __init__(self, errors, tree):
            msg = "%d parse errors"%len(errors)
            Exception.__init__(self, msg)
            self.errors = errors
            self.tree = tree

    terminals = [ '!', '&', '(', ')', '*', '+', '-', '/', '<', '=', '>', 'F',
                  'FALSE', 'G', 'LEASTSIGNIFICANTBITOVERWRITES',
                  'SubtractionOperator', 'TRUE', 'U', 'W', 'X', '[', '\\', ']',
                  '^', 'boolID', 'next', 'numID', 'numeral', '|', '~' ]
    EOF = Unique('EOF')
    S = Unique('S')

    _halting_state = 110
    _reduce = {
        (2, EOF): ('Formula', 1), (3, EOF): ('Biimplication', 1),
        (3, ')'): ('Biimplication', 1), (3, '<'): ('Biimplication', 1),
        (3, ']'): ('Biimplication', 1), (7, EOF): ('Biimplication', 3),
        (7, ')'): ('Biimplication', 3), (7, '<'): ('Biimplication', 3),
        (7, ']'): ('Biimplication', 3), (8, EOF): ('Implication', 1),
        (8, ')'): ('Implication', 1), (8, '-'): ('Implication', 1),
        (8, '<'): ('Implication', 1), (8, ']'): ('Implication', 1),
        (10, EOF): ('Implication', 3), (10, ')'): ('Implication', 3),
        (10, '-'): ('Implication', 3), (10, '<'): ('Implication', 3),
        (10, ']'): ('Implication', 3), (11, EOF): ('Xor', 1),
        (11, ')'): ('Xor', 1), (11, '-'): ('Xor', 1), (11, '<'): ('Xor', 1),
        (11, ']'): ('Xor', 1), (11, '^'): ('Xor', 1), (13, EOF): ('Xor', 3),
        (13, ')'): ('Xor', 3), (13, '-'): ('Xor', 3), (13, '<'): ('Xor', 3),
        (13, ']'): ('Xor', 3), (13, '^'): ('Xor', 3),
        (14, EOF): ('Disjunction', 1), (14, ')'): ('Disjunction', 1),
        (14, '-'): ('Disjunction', 1), (14, '<'): ('Disjunction', 1),
        (14, '\\'): ('Disjunction', 1), (14, ']'): ('Disjunction', 1),
        (14, '^'): ('Disjunction', 1), (14, '|'): ('Disjunction', 1),
        (16, EOF): ('Disjunction', 3), (16, ')'): ('Disjunction', 3),
        (16, '-'): ('Disjunction', 3), (16, '<'): ('Disjunction', 3),
        (16, '\\'): ('Disjunction', 3), (16, ']'): ('Disjunction', 3),
        (16, '^'): ('Disjunction', 3), (16, '|'): ('Disjunction', 3),
        (17, EOF): ('Conjunction', 1), (17, '&'): ('Conjunction', 1),
        (17, ')'): ('Conjunction', 1), (17, '-'): ('Conjunction', 1),
        (17, '/'): ('Conjunction', 1), (17, '<'): ('Conjunction', 1),
        (17, '\\'): ('Conjunction', 1), (17, ']'): ('Conjunction', 1),
        (17, '^'): ('Conjunction', 1), (17, '|'): ('Conjunction', 1),
        (19, EOF): ('Conjunction', 3), (19, '&'): ('Conjunction', 3),
        (19, ')'): ('Conjunction', 3), (19, '-'): ('Conjunction', 3),
        (19, '/'): ('Conjunction', 3), (19, '<'): ('Conjunction', 3),
        (19, '\\'): ('Conjunction', 3), (19, ']'): ('Conjunction', 3),
        (19, '^'): ('Conjunction', 3), (19, '|'): ('Conjunction', 3),
        (20, EOF): ('BinaryTemporalFormula', 1),
        (20, '&'): ('BinaryTemporalFormula', 1),
        (20, ')'): ('BinaryTemporalFormula', 1),
        (20, '-'): ('BinaryTemporalFormula', 1),
        (20, '/'): ('BinaryTemporalFormula', 1),
        (20, '<'): ('BinaryTemporalFormula', 1),
        (20, 'U'): ('BinaryTemporalFormula', 1),
        (20, 'W'): ('BinaryTemporalFormula', 1),
        (20, '\\'): ('BinaryTemporalFormula', 1),
        (20, ']'): ('BinaryTemporalFormula', 1),
        (20, '^'): ('BinaryTemporalFormula', 1),
        (20, '|'): ('BinaryTemporalFormula', 1),
        (22, EOF): ('BinaryTemporalFormula', 3),
        (22, '&'): ('BinaryTemporalFormula', 3),
        (22, ')'): ('BinaryTemporalFormula', 3),
        (22, '-'): ('BinaryTemporalFormula', 3),
        (22, '/'): ('BinaryTemporalFormula', 3),
        (22, '<'): ('BinaryTemporalFormula', 3),
        (22, 'U'): ('BinaryTemporalFormula', 3),
        (22, 'W'): ('BinaryTemporalFormula', 3),
        (22, '\\'): ('BinaryTemporalFormula', 3),
        (22, ']'): ('BinaryTemporalFormula', 3),
        (22, '^'): ('BinaryTemporalFormula', 3),
        (22, '|'): ('BinaryTemporalFormula', 3),
        (23, EOF): ('UnaryFormula', 1), (23, '&'): ('UnaryFormula', 1),
        (23, ')'): ('UnaryFormula', 1), (23, '-'): ('UnaryFormula', 1),
        (23, '/'): ('UnaryFormula', 1), (23, '<'): ('UnaryFormula', 1),
        (23, 'U'): ('UnaryFormula', 1), (23, 'W'): ('UnaryFormula', 1),
        (23, '\\'): ('UnaryFormula', 1), (23, ']'): ('UnaryFormula', 1),
        (23, '^'): ('UnaryFormula', 1), (23, '|'): ('UnaryFormula', 1),
        (25, EOF): ('UnaryFormula', 2), (25, '&'): ('UnaryFormula', 2),
        (25, ')'): ('UnaryFormula', 2), (25, '-'): ('UnaryFormula', 2),
        (25, '/'): ('UnaryFormula', 2), (25, '<'): ('UnaryFormula', 2),
        (25, 'U'): ('UnaryFormula', 2), (25, 'W'): ('UnaryFormula', 2),
        (25, '\\'): ('UnaryFormula', 2), (25, ']'): ('UnaryFormula', 2),
        (25, '^'): ('UnaryFormula', 2), (25, '|'): ('UnaryFormula', 2),
        (26, EOF): ('AtomicFormula', 1), (26, '&'): ('AtomicFormula', 1),
        (26, ')'): ('AtomicFormula', 1), (26, '-'): ('AtomicFormula', 1),
        (26, '/'): ('AtomicFormula', 1), (26, '<'): ('AtomicFormula', 1),
        (26, 'U'): ('AtomicFormula', 1), (26, 'W'): ('AtomicFormula', 1),
        (26, '\\'): ('AtomicFormula', 1), (26, ']'): ('AtomicFormula', 1),
        (26, '^'): ('AtomicFormula', 1), (26, '|'): ('AtomicFormula', 1),
        (27, EOF): ('AtomicFormula', 1), (27, '&'): ('AtomicFormula', 1),
        (27, ')'): ('AtomicFormula', 1), (27, '-'): ('AtomicFormula', 1),
        (27, '/'): ('AtomicFormula', 1), (27, '<'): ('AtomicFormula', 1),
        (27, 'U'): ('AtomicFormula', 1), (27, 'W'): ('AtomicFormula', 1),
        (27, '\\'): ('AtomicFormula', 1), (27, ']'): ('AtomicFormula', 1),
        (27, '^'): ('AtomicFormula', 1), (27, '|'): ('AtomicFormula', 1),
        (28, EOF): ('AtomicFormula', 1), (28, '&'): ('AtomicFormula', 1),
        (28, ')'): ('AtomicFormula', 1), (28, '-'): ('AtomicFormula', 1),
        (28, '/'): ('AtomicFormula', 1), (28, '<'): ('AtomicFormula', 1),
        (28, 'U'): ('AtomicFormula', 1), (28, 'W'): ('AtomicFormula', 1),
        (28, '\\'): ('AtomicFormula', 1), (28, ']'): ('AtomicFormula', 1),
        (28, '^'): ('AtomicFormula', 1), (28, '|'): ('AtomicFormula', 1),
        (29, EOF): ('AtomicFormula', 1), (29, '&'): ('AtomicFormula', 1),
        (29, ')'): ('AtomicFormula', 1), (29, '-'): ('AtomicFormula', 1),
        (29, '/'): ('AtomicFormula', 1), (29, '<'): ('AtomicFormula', 1),
        (29, 'U'): ('AtomicFormula', 1), (29, 'W'): ('AtomicFormula', 1),
        (29, '\\'): ('AtomicFormula', 1), (29, ']'): ('AtomicFormula', 1),
        (29, '^'): ('AtomicFormula', 1), (29, '|'): ('AtomicFormula', 1),
        (31, EOF): ('Brackets', 3), (31, '&'): ('Brackets', 3),
        (31, ')'): ('Brackets', 3), (31, '-'): ('Brackets', 3),
        (31, '/'): ('Brackets', 3), (31, '<'): ('Brackets', 3),
        (31, 'U'): ('Brackets', 3), (31, 'W'): ('Brackets', 3),
        (31, '\\'): ('Brackets', 3), (31, ']'): ('Brackets', 3),
        (31, '^'): ('Brackets', 3), (31, '|'): ('Brackets', 3),
        (33, EOF): ('Brackets', 3), (33, '&'): ('Brackets', 3),
        (33, ')'): ('Brackets', 3), (33, '-'): ('Brackets', 3),
        (33, '/'): ('Brackets', 3), (33, '<'): ('Brackets', 3),
        (33, 'U'): ('Brackets', 3), (33, 'W'): ('Brackets', 3),
        (33, '\\'): ('Brackets', 3), (33, ']'): ('Brackets', 3),
        (33, '^'): ('Brackets', 3), (33, '|'): ('Brackets', 3),
        (34, EOF): ('BooleanAtomicFormula', 1),
        (34, '&'): ('BooleanAtomicFormula', 1),
        (34, ')'): ('BooleanAtomicFormula', 1),
        (34, '-'): ('BooleanAtomicFormula', 1),
        (34, '/'): ('BooleanAtomicFormula', 1),
        (34, '<'): ('BooleanAtomicFormula', 1),
        (34, 'U'): ('BooleanAtomicFormula', 1),
        (34, 'W'): ('BooleanAtomicFormula', 1),
        (34, '\\'): ('BooleanAtomicFormula', 1),
        (34, ']'): ('BooleanAtomicFormula', 1),
        (34, '^'): ('BooleanAtomicFormula', 1),
        (34, '|'): ('BooleanAtomicFormula', 1),
        (35, EOF): ('BooleanAtomicFormula', 1),
        (35, '&'): ('BooleanAtomicFormula', 1),
        (35, ')'): ('BooleanAtomicFormula', 1),
        (35, '-'): ('BooleanAtomicFormula', 1),
        (35, '/'): ('BooleanAtomicFormula', 1),
        (35, '<'): ('BooleanAtomicFormula', 1),
        (35, 'U'): ('BooleanAtomicFormula', 1),
        (35, 'W'): ('BooleanAtomicFormula', 1),
        (35, '\\'): ('BooleanAtomicFormula', 1),
        (35, ']'): ('BooleanAtomicFormula', 1),
        (35, '^'): ('BooleanAtomicFormula', 1),
        (35, '|'): ('BooleanAtomicFormula', 1), (36, EOF): ('Assignment', 1),
        (36, '&'): ('Assignment', 1), (36, ')'): ('Assignment', 1),
        (36, '-'): ('Assignment', 1), (36, '/'): ('Assignment', 1),
        (36, '<'): ('Assignment', 1), (36, 'U'): ('Assignment', 1),
        (36, 'W'): ('Assignment', 1), (36, '\\'): ('Assignment', 1),
        (36, ']'): ('Assignment', 1), (36, '^'): ('Assignment', 1),
        (36, '|'): ('Assignment', 1), (40, EOF): ('CalculationSubformula', 3),
        (40, '&'): ('CalculationSubformula', 3),
        (40, ')'): ('CalculationSubformula', 3),
        (40, '-'): ('CalculationSubformula', 3),
        (40, '/'): ('CalculationSubformula', 3),
        (40, '<'): ('CalculationSubformula', 3),
        (40, 'U'): ('CalculationSubformula', 3),
        (40, 'W'): ('CalculationSubformula', 3),
        (40, '\\'): ('CalculationSubformula', 3),
        (40, ']'): ('CalculationSubformula', 3),
        (40, '^'): ('CalculationSubformula', 3),
        (40, '|'): ('CalculationSubformula', 3),
        (41, EOF): ('NumberExpression', 1), (41, '!'): ('NumberExpression', 1),
        (41, '&'): ('NumberExpression', 1), (41, ')'): ('NumberExpression', 1),
        (41, '-'): ('NumberExpression', 1), (41, '/'): ('NumberExpression', 1),
        (41, '<'): ('NumberExpression', 1), (41, '='): ('NumberExpression', 1),
        (41, '>'): ('NumberExpression', 1), (41, 'U'): ('NumberExpression', 1),
        (41, 'W'): ('NumberExpression', 1),
        (41, '\\'): ('NumberExpression', 1),
        (41, ']'): ('NumberExpression', 1), (41, '^'): ('NumberExpression', 1),
        (41, '|'): ('NumberExpression', 1), (43, EOF): ('NumberExpression', 3),
        (43, '!'): ('NumberExpression', 3), (43, '&'): ('NumberExpression', 3),
        (43, ')'): ('NumberExpression', 3), (43, '-'): ('NumberExpression', 3),
        (43, '/'): ('NumberExpression', 3), (43, '<'): ('NumberExpression', 3),
        (43, '='): ('NumberExpression', 3), (43, '>'): ('NumberExpression', 3),
        (43, 'U'): ('NumberExpression', 3), (43, 'W'): ('NumberExpression', 3),
        (43, '\\'): ('NumberExpression', 3),
        (43, ']'): ('NumberExpression', 3), (43, '^'): ('NumberExpression', 3),
        (43, '|'): ('NumberExpression', 3), (45, EOF): ('NumberExpression', 3),
        (45, '!'): ('NumberExpression', 3), (45, '&'): ('NumberExpression', 3),
        (45, ')'): ('NumberExpression', 3), (45, '-'): ('NumberExpression', 3),
        (45, '/'): ('NumberExpression', 3), (45, '<'): ('NumberExpression', 3),
        (45, '='): ('NumberExpression', 3), (45, '>'): ('NumberExpression', 3),
        (45, 'U'): ('NumberExpression', 3), (45, 'W'): ('NumberExpression', 3),
        (45, '\\'): ('NumberExpression', 3),
        (45, ']'): ('NumberExpression', 3), (45, '^'): ('NumberExpression', 3),
        (45, '|'): ('NumberExpression', 3),
        (46, EOF): ('MultiplicativeNumber', 1),
        (46, '!'): ('MultiplicativeNumber', 1),
        (46, '&'): ('MultiplicativeNumber', 1),
        (46, ')'): ('MultiplicativeNumber', 1),
        (46, '+'): ('MultiplicativeNumber', 1),
        (46, '-'): ('MultiplicativeNumber', 1),
        (46, '/'): ('MultiplicativeNumber', 1),
        (46, '<'): ('MultiplicativeNumber', 1),
        (46, '='): ('MultiplicativeNumber', 1),
        (46, '>'): ('MultiplicativeNumber', 1),
        (46, 'SubtractionOperator'): ('MultiplicativeNumber', 1),
        (46, 'U'): ('MultiplicativeNumber', 1),
        (46, 'W'): ('MultiplicativeNumber', 1),
        (46, '\\'): ('MultiplicativeNumber', 1),
        (46, ']'): ('MultiplicativeNumber', 1),
        (46, '^'): ('MultiplicativeNumber', 1),
        (46, '|'): ('MultiplicativeNumber', 1),
        (48, EOF): ('MultiplicativeNumber', 3),
        (48, '!'): ('MultiplicativeNumber', 3),
        (48, '&'): ('MultiplicativeNumber', 3),
        (48, ')'): ('MultiplicativeNumber', 3),
        (48, '+'): ('MultiplicativeNumber', 3),
        (48, '-'): ('MultiplicativeNumber', 3),
        (48, '/'): ('MultiplicativeNumber', 3),
        (48, '<'): ('MultiplicativeNumber', 3),
        (48, '='): ('MultiplicativeNumber', 3),
        (48, '>'): ('MultiplicativeNumber', 3),
        (48, 'SubtractionOperator'): ('MultiplicativeNumber', 3),
        (48, 'U'): ('MultiplicativeNumber', 3),
        (48, 'W'): ('MultiplicativeNumber', 3),
        (48, '\\'): ('MultiplicativeNumber', 3),
        (48, ']'): ('MultiplicativeNumber', 3),
        (48, '^'): ('MultiplicativeNumber', 3),
        (48, '|'): ('MultiplicativeNumber', 3),
        (49, EOF): ('LeastSignificantBitOverwriteExpression', 1),
        (49, '!'): ('LeastSignificantBitOverwriteExpression', 1),
        (49, '&'): ('LeastSignificantBitOverwriteExpression', 1),
        (49, ')'): ('LeastSignificantBitOverwriteExpression', 1),
        (49, '*'): ('LeastSignificantBitOverwriteExpression', 1),
        (49, '+'): ('LeastSignificantBitOverwriteExpression', 1),
        (49, '-'): ('LeastSignificantBitOverwriteExpression', 1),
        (49, '/'): ('LeastSignificantBitOverwriteExpression', 1),
        (49, '<'): ('LeastSignificantBitOverwriteExpression', 1),
        (49, '='): ('LeastSignificantBitOverwriteExpression', 1),
        (49, '>'): ('LeastSignificantBitOverwriteExpression', 1),
        (49, 'SubtractionOperator'): ('LeastSignificantBitOverwriteExpression', 1),
        (49, 'U'): ('LeastSignificantBitOverwriteExpression', 1),
        (49, 'W'): ('LeastSignificantBitOverwriteExpression', 1),
        (49, '\\'): ('LeastSignificantBitOverwriteExpression', 1),
        (49, ']'): ('LeastSignificantBitOverwriteExpression', 1),
        (49, '^'): ('LeastSignificantBitOverwriteExpression', 1),
        (49, '|'): ('LeastSignificantBitOverwriteExpression', 1),
        (51, EOF): ('LeastSignificantBitOverwriteExpression', 3),
        (51, '!'): ('LeastSignificantBitOverwriteExpression', 3),
        (51, '&'): ('LeastSignificantBitOverwriteExpression', 3),
        (51, ')'): ('LeastSignificantBitOverwriteExpression', 3),
        (51, '*'): ('LeastSignificantBitOverwriteExpression', 3),
        (51, '+'): ('LeastSignificantBitOverwriteExpression', 3),
        (51, '-'): ('LeastSignificantBitOverwriteExpression', 3),
        (51, '/'): ('LeastSignificantBitOverwriteExpression', 3),
        (51, '<'): ('LeastSignificantBitOverwriteExpression', 3),
        (51, '='): ('LeastSignificantBitOverwriteExpression', 3),
        (51, '>'): ('LeastSignificantBitOverwriteExpression', 3),
        (51, 'SubtractionOperator'): ('LeastSignificantBitOverwriteExpression', 3),
        (51, 'U'): ('LeastSignificantBitOverwriteExpression', 3),
        (51, 'W'): ('LeastSignificantBitOverwriteExpression', 3),
        (51, '\\'): ('LeastSignificantBitOverwriteExpression', 3),
        (51, ']'): ('LeastSignificantBitOverwriteExpression', 3),
        (51, '^'): ('LeastSignificantBitOverwriteExpression', 3),
        (51, '|'): ('LeastSignificantBitOverwriteExpression', 3),
        (52, EOF): ('AtomicNumberExpression', 1),
        (52, '!'): ('AtomicNumberExpression', 1),
        (52, '&'): ('AtomicNumberExpression', 1),
        (52, ')'): ('AtomicNumberExpression', 1),
        (52, '*'): ('AtomicNumberExpression', 1),
        (52, '+'): ('AtomicNumberExpression', 1),
        (52, '-'): ('AtomicNumberExpression', 1),
        (52, '/'): ('AtomicNumberExpression', 1),
        (52, '<'): ('AtomicNumberExpression', 1),
        (52, '='): ('AtomicNumberExpression', 1),
        (52, '>'): ('AtomicNumberExpression', 1),
        (52, 'LEASTSIGNIFICANTBITOVERWRITES'): ('AtomicNumberExpression', 1),
        (52, 'SubtractionOperator'): ('AtomicNumberExpression', 1),
        (52, 'U'): ('AtomicNumberExpression', 1),
        (52, 'W'): ('AtomicNumberExpression', 1),
        (52, '\\'): ('AtomicNumberExpression', 1),
        (52, ']'): ('AtomicNumberExpression', 1),
        (52, '^'): ('AtomicNumberExpression', 1),
        (52, '|'): ('AtomicNumberExpression', 1),
        (53, EOF): ('AtomicNumberExpression', 1),
        (53, '!'): ('AtomicNumberExpression', 1),
        (53, '&'): ('AtomicNumberExpression', 1),
        (53, ')'): ('AtomicNumberExpression', 1),
        (53, '*'): ('AtomicNumberExpression', 1),
        (53, '+'): ('AtomicNumberExpression', 1),
        (53, '-'): ('AtomicNumberExpression', 1),
        (53, '/'): ('AtomicNumberExpression', 1),
        (53, '<'): ('AtomicNumberExpression', 1),
        (53, '='): ('AtomicNumberExpression', 1),
        (53, '>'): ('AtomicNumberExpression', 1),
        (53, 'LEASTSIGNIFICANTBITOVERWRITES'): ('AtomicNumberExpression', 1),
        (53, 'SubtractionOperator'): ('AtomicNumberExpression', 1),
        (53, 'U'): ('AtomicNumberExpression', 1),
        (53, 'W'): ('AtomicNumberExpression', 1),
        (53, '\\'): ('AtomicNumberExpression', 1),
        (53, ']'): ('AtomicNumberExpression', 1),
        (53, '^'): ('AtomicNumberExpression', 1),
        (53, '|'): ('AtomicNumberExpression', 1),
        (54, EOF): ('AtomicNumberExpression', 1),
        (54, '!'): ('AtomicNumberExpression', 1),
        (54, '&'): ('AtomicNumberExpression', 1),
        (54, ')'): ('AtomicNumberExpression', 1),
        (54, '*'): ('AtomicNumberExpression', 1),
        (54, '+'): ('AtomicNumberExpression', 1),
        (54, '-'): ('AtomicNumberExpression', 1),
        (54, '/'): ('AtomicNumberExpression', 1),
        (54, '<'): ('AtomicNumberExpression', 1),
        (54, '='): ('AtomicNumberExpression', 1),
        (54, '>'): ('AtomicNumberExpression', 1),
        (54, 'LEASTSIGNIFICANTBITOVERWRITES'): ('AtomicNumberExpression', 1),
        (54, 'SubtractionOperator'): ('AtomicNumberExpression', 1),
        (54, 'U'): ('AtomicNumberExpression', 1),
        (54, 'W'): ('AtomicNumberExpression', 1),
        (54, '\\'): ('AtomicNumberExpression', 1),
        (54, ']'): ('AtomicNumberExpression', 1),
        (54, '^'): ('AtomicNumberExpression', 1),
        (54, '|'): ('AtomicNumberExpression', 1),
        (57, EOF): ('NumberBrackets', 3), (57, '!'): ('NumberBrackets', 3),
        (57, '&'): ('NumberBrackets', 3), (57, ')'): ('NumberBrackets', 3),
        (57, '*'): ('NumberBrackets', 3), (57, '+'): ('NumberBrackets', 3),
        (57, '-'): ('NumberBrackets', 3), (57, '/'): ('NumberBrackets', 3),
        (57, '<'): ('NumberBrackets', 3), (57, '='): ('NumberBrackets', 3),
        (57, '>'): ('NumberBrackets', 3),
        (57, 'LEASTSIGNIFICANTBITOVERWRITES'): ('NumberBrackets', 3),
        (57, 'SubtractionOperator'): ('NumberBrackets', 3),
        (57, 'U'): ('NumberBrackets', 3), (57, 'W'): ('NumberBrackets', 3),
        (57, '\\'): ('NumberBrackets', 3), (57, ']'): ('NumberBrackets', 3),
        (57, '^'): ('NumberBrackets', 3), (57, '|'): ('NumberBrackets', 3),
        (58, '!'): ('BinaryTemporalOperator', 1),
        (58, '('): ('BinaryTemporalOperator', 1),
        (58, '<'): ('BinaryTemporalOperator', 1),
        (58, 'F'): ('BinaryTemporalOperator', 1),
        (58, 'FALSE'): ('BinaryTemporalOperator', 1),
        (58, 'G'): ('BinaryTemporalOperator', 1),
        (58, 'TRUE'): ('BinaryTemporalOperator', 1),
        (58, 'X'): ('BinaryTemporalOperator', 1),
        (58, '['): ('BinaryTemporalOperator', 1),
        (58, 'boolID'): ('BinaryTemporalOperator', 1),
        (58, 'next'): ('BinaryTemporalOperator', 1),
        (58, 'numID'): ('BinaryTemporalOperator', 1),
        (58, 'numeral'): ('BinaryTemporalOperator', 1),
        (58, '~'): ('BinaryTemporalOperator', 1),
        (59, '!'): ('BinaryTemporalOperator', 1),
        (59, '('): ('BinaryTemporalOperator', 1),
        (59, '<'): ('BinaryTemporalOperator', 1),
        (59, 'F'): ('BinaryTemporalOperator', 1),
        (59, 'FALSE'): ('BinaryTemporalOperator', 1),
        (59, 'G'): ('BinaryTemporalOperator', 1),
        (59, 'TRUE'): ('BinaryTemporalOperator', 1),
        (59, 'X'): ('BinaryTemporalOperator', 1),
        (59, '['): ('BinaryTemporalOperator', 1),
        (59, 'boolID'): ('BinaryTemporalOperator', 1),
        (59, 'next'): ('BinaryTemporalOperator', 1),
        (59, 'numID'): ('BinaryTemporalOperator', 1),
        (59, 'numeral'): ('BinaryTemporalOperator', 1),
        (59, '~'): ('BinaryTemporalOperator', 1),
        (60, '!'): ('UntilOperator', 1), (60, '('): ('UntilOperator', 1),
        (60, '<'): ('UntilOperator', 1), (60, 'F'): ('UntilOperator', 1),
        (60, 'FALSE'): ('UntilOperator', 1), (60, 'G'): ('UntilOperator', 1),
        (60, 'TRUE'): ('UntilOperator', 1), (60, 'X'): ('UntilOperator', 1),
        (60, '['): ('UntilOperator', 1), (60, 'boolID'): ('UntilOperator', 1),
        (60, 'next'): ('UntilOperator', 1),
        (60, 'numID'): ('UntilOperator', 1),
        (60, 'numeral'): ('UntilOperator', 1), (60, '~'): ('UntilOperator', 1),
        (61, '!'): ('WeakUntilOperator', 1),
        (61, '('): ('WeakUntilOperator', 1),
        (61, '<'): ('WeakUntilOperator', 1),
        (61, 'F'): ('WeakUntilOperator', 1),
        (61, 'FALSE'): ('WeakUntilOperator', 1),
        (61, 'G'): ('WeakUntilOperator', 1),
        (61, 'TRUE'): ('WeakUntilOperator', 1),
        (61, 'X'): ('WeakUntilOperator', 1),
        (61, '['): ('WeakUntilOperator', 1),
        (61, 'boolID'): ('WeakUntilOperator', 1),
        (61, 'next'): ('WeakUntilOperator', 1),
        (61, 'numID'): ('WeakUntilOperator', 1),
        (61, 'numeral'): ('WeakUntilOperator', 1),
        (61, '~'): ('WeakUntilOperator', 1),
        (64, '!'): ('ImplicationOperator', 3),
        (64, '('): ('ImplicationOperator', 3),
        (64, '<'): ('ImplicationOperator', 3),
        (64, 'F'): ('ImplicationOperator', 3),
        (64, 'FALSE'): ('ImplicationOperator', 3),
        (64, 'G'): ('ImplicationOperator', 3),
        (64, 'TRUE'): ('ImplicationOperator', 3),
        (64, 'X'): ('ImplicationOperator', 3),
        (64, '['): ('ImplicationOperator', 3),
        (64, 'boolID'): ('ImplicationOperator', 3),
        (64, 'next'): ('ImplicationOperator', 3),
        (64, 'numID'): ('ImplicationOperator', 3),
        (64, 'numeral'): ('ImplicationOperator', 3),
        (64, '~'): ('ImplicationOperator', 3),
        (65, '!'): ('ImplicationOperator', 2),
        (65, '('): ('ImplicationOperator', 2),
        (65, '<'): ('ImplicationOperator', 2),
        (65, 'F'): ('ImplicationOperator', 2),
        (65, 'FALSE'): ('ImplicationOperator', 2),
        (65, 'G'): ('ImplicationOperator', 2),
        (65, 'TRUE'): ('ImplicationOperator', 2),
        (65, 'X'): ('ImplicationOperator', 2),
        (65, '['): ('ImplicationOperator', 2),
        (65, 'boolID'): ('ImplicationOperator', 2),
        (65, 'next'): ('ImplicationOperator', 2),
        (65, 'numID'): ('ImplicationOperator', 2),
        (65, 'numeral'): ('ImplicationOperator', 2),
        (65, '~'): ('ImplicationOperator', 2),
        (69, '!'): ('BiimplicationOperator', 4),
        (69, '('): ('BiimplicationOperator', 4),
        (69, '<'): ('BiimplicationOperator', 4),
        (69, 'F'): ('BiimplicationOperator', 4),
        (69, 'FALSE'): ('BiimplicationOperator', 4),
        (69, 'G'): ('BiimplicationOperator', 4),
        (69, 'TRUE'): ('BiimplicationOperator', 4),
        (69, 'X'): ('BiimplicationOperator', 4),
        (69, '['): ('BiimplicationOperator', 4),
        (69, 'boolID'): ('BiimplicationOperator', 4),
        (69, 'next'): ('BiimplicationOperator', 4),
        (69, 'numID'): ('BiimplicationOperator', 4),
        (69, 'numeral'): ('BiimplicationOperator', 4),
        (69, '~'): ('BiimplicationOperator', 4),
        (70, '!'): ('BiimplicationOperator', 3),
        (70, '('): ('BiimplicationOperator', 3),
        (70, '<'): ('BiimplicationOperator', 3),
        (70, 'F'): ('BiimplicationOperator', 3),
        (70, 'FALSE'): ('BiimplicationOperator', 3),
        (70, 'G'): ('BiimplicationOperator', 3),
        (70, 'TRUE'): ('BiimplicationOperator', 3),
        (70, 'X'): ('BiimplicationOperator', 3),
        (70, '['): ('BiimplicationOperator', 3),
        (70, 'boolID'): ('BiimplicationOperator', 3),
        (70, 'next'): ('BiimplicationOperator', 3),
        (70, 'numID'): ('BiimplicationOperator', 3),
        (70, 'numeral'): ('BiimplicationOperator', 3),
        (70, '~'): ('BiimplicationOperator', 3),
        (72, '!'): ('DisjunctionOperator', 2),
        (72, '('): ('DisjunctionOperator', 2),
        (72, '<'): ('DisjunctionOperator', 2),
        (72, 'F'): ('DisjunctionOperator', 2),
        (72, 'FALSE'): ('DisjunctionOperator', 2),
        (72, 'G'): ('DisjunctionOperator', 2),
        (72, 'TRUE'): ('DisjunctionOperator', 2),
        (72, 'X'): ('DisjunctionOperator', 2),
        (72, '['): ('DisjunctionOperator', 2),
        (72, 'boolID'): ('DisjunctionOperator', 2),
        (72, 'next'): ('DisjunctionOperator', 2),
        (72, 'numID'): ('DisjunctionOperator', 2),
        (72, 'numeral'): ('DisjunctionOperator', 2),
        (72, '~'): ('DisjunctionOperator', 2),
        (73, '!'): ('DisjunctionOperator', 1),
        (73, '('): ('DisjunctionOperator', 1),
        (73, '<'): ('DisjunctionOperator', 1),
        (73, 'F'): ('DisjunctionOperator', 1),
        (73, 'FALSE'): ('DisjunctionOperator', 1),
        (73, 'G'): ('DisjunctionOperator', 1),
        (73, 'TRUE'): ('DisjunctionOperator', 1),
        (73, 'X'): ('DisjunctionOperator', 1),
        (73, '['): ('DisjunctionOperator', 1),
        (73, 'boolID'): ('DisjunctionOperator', 1),
        (73, 'next'): ('DisjunctionOperator', 1),
        (73, 'numID'): ('DisjunctionOperator', 1),
        (73, 'numeral'): ('DisjunctionOperator', 1),
        (73, '~'): ('DisjunctionOperator', 1),
        (74, '!'): ('DisjunctionOperator', 2),
        (74, '('): ('DisjunctionOperator', 2),
        (74, '<'): ('DisjunctionOperator', 2),
        (74, 'F'): ('DisjunctionOperator', 2),
        (74, 'FALSE'): ('DisjunctionOperator', 2),
        (74, 'G'): ('DisjunctionOperator', 2),
        (74, 'TRUE'): ('DisjunctionOperator', 2),
        (74, 'X'): ('DisjunctionOperator', 2),
        (74, '['): ('DisjunctionOperator', 2),
        (74, 'boolID'): ('DisjunctionOperator', 2),
        (74, 'next'): ('DisjunctionOperator', 2),
        (74, 'numID'): ('DisjunctionOperator', 2),
        (74, 'numeral'): ('DisjunctionOperator', 2),
        (74, '~'): ('DisjunctionOperator', 2),
        (76, '!'): ('ConjunctionOperator', 2),
        (76, '('): ('ConjunctionOperator', 2),
        (76, '<'): ('ConjunctionOperator', 2),
        (76, 'F'): ('ConjunctionOperator', 2),
        (76, 'FALSE'): ('ConjunctionOperator', 2),
        (76, 'G'): ('ConjunctionOperator', 2),
        (76, 'TRUE'): ('ConjunctionOperator', 2),
        (76, 'X'): ('ConjunctionOperator', 2),
        (76, '['): ('ConjunctionOperator', 2),
        (76, 'boolID'): ('ConjunctionOperator', 2),
        (76, 'next'): ('ConjunctionOperator', 2),
        (76, 'numID'): ('ConjunctionOperator', 2),
        (76, 'numeral'): ('ConjunctionOperator', 2),
        (76, '~'): ('ConjunctionOperator', 2),
        (77, '!'): ('ConjunctionOperator', 1),
        (77, '('): ('ConjunctionOperator', 1),
        (77, '<'): ('ConjunctionOperator', 1),
        (77, 'F'): ('ConjunctionOperator', 1),
        (77, 'FALSE'): ('ConjunctionOperator', 1),
        (77, 'G'): ('ConjunctionOperator', 1),
        (77, 'TRUE'): ('ConjunctionOperator', 1),
        (77, 'X'): ('ConjunctionOperator', 1),
        (77, '['): ('ConjunctionOperator', 1),
        (77, 'boolID'): ('ConjunctionOperator', 1),
        (77, 'next'): ('ConjunctionOperator', 1),
        (77, 'numID'): ('ConjunctionOperator', 1),
        (77, 'numeral'): ('ConjunctionOperator', 1),
        (77, '~'): ('ConjunctionOperator', 1),
        (78, '!'): ('ConjunctionOperator', 2),
        (78, '('): ('ConjunctionOperator', 2),
        (78, '<'): ('ConjunctionOperator', 2),
        (78, 'F'): ('ConjunctionOperator', 2),
        (78, 'FALSE'): ('ConjunctionOperator', 2),
        (78, 'G'): ('ConjunctionOperator', 2),
        (78, 'TRUE'): ('ConjunctionOperator', 2),
        (78, 'X'): ('ConjunctionOperator', 2),
        (78, '['): ('ConjunctionOperator', 2),
        (78, 'boolID'): ('ConjunctionOperator', 2),
        (78, 'next'): ('ConjunctionOperator', 2),
        (78, 'numID'): ('ConjunctionOperator', 2),
        (78, 'numeral'): ('ConjunctionOperator', 2),
        (78, '~'): ('ConjunctionOperator', 2),
        (79, '('): ('NumberComparisonOperator', 1),
        (79, 'numID'): ('NumberComparisonOperator', 1),
        (79, 'numeral'): ('NumberComparisonOperator', 1),
        (80, '('): ('NumberComparisonOperator', 1),
        (80, 'numID'): ('NumberComparisonOperator', 1),
        (80, 'numeral'): ('NumberComparisonOperator', 1),
        (81, '('): ('NumberComparisonOperator', 1),
        (81, 'numID'): ('NumberComparisonOperator', 1),
        (81, 'numeral'): ('NumberComparisonOperator', 1),
        (82, '('): ('NumberComparisonOperator', 1),
        (82, 'numID'): ('NumberComparisonOperator', 1),
        (82, 'numeral'): ('NumberComparisonOperator', 1),
        (83, '('): ('NumberComparisonOperator', 1),
        (83, 'numID'): ('NumberComparisonOperator', 1),
        (83, 'numeral'): ('NumberComparisonOperator', 1),
        (84, '('): ('NumberComparisonOperator', 1),
        (84, 'numID'): ('NumberComparisonOperator', 1),
        (84, 'numeral'): ('NumberComparisonOperator', 1),
        (85, '('): ('GreaterOperator', 1),
        (85, 'numID'): ('GreaterOperator', 1),
        (85, 'numeral'): ('GreaterOperator', 1),
        (86, '('): ('SmallerOperator', 1),
        (86, 'numID'): ('SmallerOperator', 1),
        (86, 'numeral'): ('SmallerOperator', 1),
        (87, '('): ('EqualOperator', 1), (87, 'numID'): ('EqualOperator', 1),
        (87, 'numeral'): ('EqualOperator', 1),
        (89, '('): ('UnequalOperator', 2),
        (89, 'numID'): ('UnequalOperator', 2),
        (89, 'numeral'): ('UnequalOperator', 2),
        (90, '('): ('SmallerEqualOperator', 2),
        (90, 'numID'): ('SmallerEqualOperator', 2),
        (90, 'numeral'): ('SmallerEqualOperator', 2),
        (91, '('): ('GreaterEqualOperator', 2),
        (91, 'numID'): ('GreaterEqualOperator', 2),
        (91, 'numeral'): ('GreaterEqualOperator', 2),
        (92, '('): ('AdditionOperator', 1),
        (92, 'numID'): ('AdditionOperator', 1),
        (92, 'numeral'): ('AdditionOperator', 1),
        (93, '('): ('MultiplicationOperator', 1),
        (93, 'numID'): ('MultiplicationOperator', 1),
        (93, 'numeral'): ('MultiplicationOperator', 1),
        (94, '('): ('LeastSignificantBitOverwriteOperator', 1),
        (94, 'numID'): ('LeastSignificantBitOverwriteOperator', 1),
        (94, 'numeral'): ('LeastSignificantBitOverwriteOperator', 1),
        (95, '!'): ('XorOperator', 1), (95, '('): ('XorOperator', 1),
        (95, '<'): ('XorOperator', 1), (95, 'F'): ('XorOperator', 1),
        (95, 'FALSE'): ('XorOperator', 1), (95, 'G'): ('XorOperator', 1),
        (95, 'TRUE'): ('XorOperator', 1), (95, 'X'): ('XorOperator', 1),
        (95, '['): ('XorOperator', 1), (95, 'boolID'): ('XorOperator', 1),
        (95, 'next'): ('XorOperator', 1), (95, 'numID'): ('XorOperator', 1),
        (95, 'numeral'): ('XorOperator', 1), (95, '~'): ('XorOperator', 1),
        (96, '!'): ('UnaryTemporalOperator', 1),
        (96, '('): ('UnaryTemporalOperator', 1),
        (96, '<'): ('UnaryTemporalOperator', 1),
        (96, 'F'): ('UnaryTemporalOperator', 1),
        (96, 'FALSE'): ('UnaryTemporalOperator', 1),
        (96, 'G'): ('UnaryTemporalOperator', 1),
        (96, 'TRUE'): ('UnaryTemporalOperator', 1),
        (96, 'X'): ('UnaryTemporalOperator', 1),
        (96, '['): ('UnaryTemporalOperator', 1),
        (96, 'boolID'): ('UnaryTemporalOperator', 1),
        (96, 'next'): ('UnaryTemporalOperator', 1),
        (96, 'numID'): ('UnaryTemporalOperator', 1),
        (96, 'numeral'): ('UnaryTemporalOperator', 1),
        (96, '~'): ('UnaryTemporalOperator', 1),
        (97, '!'): ('UnaryTemporalOperator', 1),
        (97, '('): ('UnaryTemporalOperator', 1),
        (97, '<'): ('UnaryTemporalOperator', 1),
        (97, 'F'): ('UnaryTemporalOperator', 1),
        (97, 'FALSE'): ('UnaryTemporalOperator', 1),
        (97, 'G'): ('UnaryTemporalOperator', 1),
        (97, 'TRUE'): ('UnaryTemporalOperator', 1),
        (97, 'X'): ('UnaryTemporalOperator', 1),
        (97, '['): ('UnaryTemporalOperator', 1),
        (97, 'boolID'): ('UnaryTemporalOperator', 1),
        (97, 'next'): ('UnaryTemporalOperator', 1),
        (97, 'numID'): ('UnaryTemporalOperator', 1),
        (97, 'numeral'): ('UnaryTemporalOperator', 1),
        (97, '~'): ('UnaryTemporalOperator', 1),
        (98, '!'): ('UnaryTemporalOperator', 1),
        (98, '('): ('UnaryTemporalOperator', 1),
        (98, '<'): ('UnaryTemporalOperator', 1),
        (98, 'F'): ('UnaryTemporalOperator', 1),
        (98, 'FALSE'): ('UnaryTemporalOperator', 1),
        (98, 'G'): ('UnaryTemporalOperator', 1),
        (98, 'TRUE'): ('UnaryTemporalOperator', 1),
        (98, 'X'): ('UnaryTemporalOperator', 1),
        (98, '['): ('UnaryTemporalOperator', 1),
        (98, 'boolID'): ('UnaryTemporalOperator', 1),
        (98, 'next'): ('UnaryTemporalOperator', 1),
        (98, 'numID'): ('UnaryTemporalOperator', 1),
        (98, 'numeral'): ('UnaryTemporalOperator', 1),
        (98, '~'): ('UnaryTemporalOperator', 1),
        (99, '!'): ('UnaryTemporalOperator', 1),
        (99, '('): ('UnaryTemporalOperator', 1),
        (99, '<'): ('UnaryTemporalOperator', 1),
        (99, 'F'): ('UnaryTemporalOperator', 1),
        (99, 'FALSE'): ('UnaryTemporalOperator', 1),
        (99, 'G'): ('UnaryTemporalOperator', 1),
        (99, 'TRUE'): ('UnaryTemporalOperator', 1),
        (99, 'X'): ('UnaryTemporalOperator', 1),
        (99, '['): ('UnaryTemporalOperator', 1),
        (99, 'boolID'): ('UnaryTemporalOperator', 1),
        (99, 'next'): ('UnaryTemporalOperator', 1),
        (99, 'numID'): ('UnaryTemporalOperator', 1),
        (99, 'numeral'): ('UnaryTemporalOperator', 1),
        (99, '~'): ('UnaryTemporalOperator', 1),
        (101, '!'): ('FinallyOperator', 2), (101, '('): ('FinallyOperator', 2),
        (101, '<'): ('FinallyOperator', 2), (101, 'F'): ('FinallyOperator', 2),
        (101, 'FALSE'): ('FinallyOperator', 2),
        (101, 'G'): ('FinallyOperator', 2),
        (101, 'TRUE'): ('FinallyOperator', 2),
        (101, 'X'): ('FinallyOperator', 2), (101, '['): ('FinallyOperator', 2),
        (101, 'boolID'): ('FinallyOperator', 2),
        (101, 'next'): ('FinallyOperator', 2),
        (101, 'numID'): ('FinallyOperator', 2),
        (101, 'numeral'): ('FinallyOperator', 2),
        (101, '~'): ('FinallyOperator', 2), (102, '!'): ('FinallyOperator', 1),
        (102, '('): ('FinallyOperator', 1), (102, '<'): ('FinallyOperator', 1),
        (102, 'F'): ('FinallyOperator', 1),
        (102, 'FALSE'): ('FinallyOperator', 1),
        (102, 'G'): ('FinallyOperator', 1),
        (102, 'TRUE'): ('FinallyOperator', 1),
        (102, 'X'): ('FinallyOperator', 1), (102, '['): ('FinallyOperator', 1),
        (102, 'boolID'): ('FinallyOperator', 1),
        (102, 'next'): ('FinallyOperator', 1),
        (102, 'numID'): ('FinallyOperator', 1),
        (102, 'numeral'): ('FinallyOperator', 1),
        (102, '~'): ('FinallyOperator', 1), (103, '!'): ('NextOperator', 2),
        (103, '('): ('NextOperator', 2), (103, '<'): ('NextOperator', 2),
        (103, 'F'): ('NextOperator', 2), (103, 'FALSE'): ('NextOperator', 2),
        (103, 'G'): ('NextOperator', 2), (103, 'TRUE'): ('NextOperator', 2),
        (103, 'X'): ('NextOperator', 2), (103, '['): ('NextOperator', 2),
        (103, 'boolID'): ('NextOperator', 2),
        (103, 'next'): ('NextOperator', 2),
        (103, 'numID'): ('NextOperator', 2),
        (103, 'numeral'): ('NextOperator', 2), (103, '~'): ('NextOperator', 2),
        (104, '!'): ('NextOperator', 1), (104, '('): ('NextOperator', 1),
        (104, '<'): ('NextOperator', 1), (104, 'F'): ('NextOperator', 1),
        (104, 'FALSE'): ('NextOperator', 1), (104, 'G'): ('NextOperator', 1),
        (104, 'TRUE'): ('NextOperator', 1), (104, 'X'): ('NextOperator', 1),
        (104, '['): ('NextOperator', 1), (104, 'boolID'): ('NextOperator', 1),
        (104, 'next'): ('NextOperator', 1),
        (104, 'numID'): ('NextOperator', 1),
        (104, 'numeral'): ('NextOperator', 1), (104, '~'): ('NextOperator', 1),
        (105, '!'): ('NextOperator', 1), (105, '('): ('NextOperator', 1),
        (105, '<'): ('NextOperator', 1), (105, 'F'): ('NextOperator', 1),
        (105, 'FALSE'): ('NextOperator', 1), (105, 'G'): ('NextOperator', 1),
        (105, 'TRUE'): ('NextOperator', 1), (105, 'X'): ('NextOperator', 1),
        (105, '['): ('NextOperator', 1), (105, 'boolID'): ('NextOperator', 1),
        (105, 'next'): ('NextOperator', 1),
        (105, 'numID'): ('NextOperator', 1),
        (105, 'numeral'): ('NextOperator', 1), (105, '~'): ('NextOperator', 1),
        (106, '!'): ('GloballyOperator', 2),
        (106, '('): ('GloballyOperator', 2),
        (106, '<'): ('GloballyOperator', 2),
        (106, 'F'): ('GloballyOperator', 2),
        (106, 'FALSE'): ('GloballyOperator', 2),
        (106, 'G'): ('GloballyOperator', 2),
        (106, 'TRUE'): ('GloballyOperator', 2),
        (106, 'X'): ('GloballyOperator', 2),
        (106, '['): ('GloballyOperator', 2),
        (106, 'boolID'): ('GloballyOperator', 2),
        (106, 'next'): ('GloballyOperator', 2),
        (106, 'numID'): ('GloballyOperator', 2),
        (106, 'numeral'): ('GloballyOperator', 2),
        (106, '~'): ('GloballyOperator', 2),
        (107, '!'): ('GloballyOperator', 1),
        (107, '('): ('GloballyOperator', 1),
        (107, '<'): ('GloballyOperator', 1),
        (107, 'F'): ('GloballyOperator', 1),
        (107, 'FALSE'): ('GloballyOperator', 1),
        (107, 'G'): ('GloballyOperator', 1),
        (107, 'TRUE'): ('GloballyOperator', 1),
        (107, 'X'): ('GloballyOperator', 1),
        (107, '['): ('GloballyOperator', 1),
        (107, 'boolID'): ('GloballyOperator', 1),
        (107, 'next'): ('GloballyOperator', 1),
        (107, 'numID'): ('GloballyOperator', 1),
        (107, 'numeral'): ('GloballyOperator', 1),
        (107, '~'): ('GloballyOperator', 1), (108, '!'): ('NotOperator', 1),
        (108, '('): ('NotOperator', 1), (108, '<'): ('NotOperator', 1),
        (108, 'F'): ('NotOperator', 1), (108, 'FALSE'): ('NotOperator', 1),
        (108, 'G'): ('NotOperator', 1), (108, 'TRUE'): ('NotOperator', 1),
        (108, 'X'): ('NotOperator', 1), (108, '['): ('NotOperator', 1),
        (108, 'boolID'): ('NotOperator', 1), (108, 'next'): ('NotOperator', 1),
        (108, 'numID'): ('NotOperator', 1),
        (108, 'numeral'): ('NotOperator', 1), (108, '~'): ('NotOperator', 1),
        (109, '!'): ('NotOperator', 1), (109, '('): ('NotOperator', 1),
        (109, '<'): ('NotOperator', 1), (109, 'F'): ('NotOperator', 1),
        (109, 'FALSE'): ('NotOperator', 1), (109, 'G'): ('NotOperator', 1),
        (109, 'TRUE'): ('NotOperator', 1), (109, 'X'): ('NotOperator', 1),
        (109, '['): ('NotOperator', 1), (109, 'boolID'): ('NotOperator', 1),
        (109, 'next'): ('NotOperator', 1), (109, 'numID'): ('NotOperator', 1),
        (109, 'numeral'): ('NotOperator', 1), (109, '~'): ('NotOperator', 1)
    }
    _goto = {
        (0, 'Assignment'): 34, (0, 'AtomicFormula'): 23,
        (0, 'AtomicNumberExpression'): 49, (0, 'Biimplication'): 2,
        (0, 'BinaryTemporalFormula'): 17, (0, 'BooleanAtomicFormula'): 29,
        (0, 'Brackets'): 28, (0, 'CalculationSubformula'): 35,
        (0, 'Conjunction'): 14, (0, 'Disjunction'): 11,
        (0, 'FinallyOperator'): 96, (0, 'Formula'): 1,
        (0, 'GloballyOperator'): 98, (0, 'Implication'): 3,
        (0, 'LeastSignificantBitOverwriteExpression'): 46,
        (0, 'MultiplicativeNumber'): 41, (0, 'NextOperator'): 97,
        (0, 'NotOperator'): 99, (0, 'NumberBrackets'): 54,
        (0, 'NumberExpression'): 37, (0, 'UnaryFormula'): 20,
        (0, 'UnaryTemporalOperator'): 24, (0, 'Xor'): 8,
        (2, 'BiimplicationOperator'): 6, (3, 'ImplicationOperator'): 9,
        (4, 'BiimplicationOperator'): 6, (5, 'BiimplicationOperator'): 6,
        (6, 'Assignment'): 34, (6, 'AtomicFormula'): 23,
        (6, 'AtomicNumberExpression'): 49, (6, 'BinaryTemporalFormula'): 17,
        (6, 'BooleanAtomicFormula'): 29, (6, 'Brackets'): 28,
        (6, 'CalculationSubformula'): 35, (6, 'Conjunction'): 14,
        (6, 'Disjunction'): 11, (6, 'FinallyOperator'): 96,
        (6, 'GloballyOperator'): 98, (6, 'Implication'): 7,
        (6, 'LeastSignificantBitOverwriteExpression'): 46,
        (6, 'MultiplicativeNumber'): 41, (6, 'NextOperator'): 97,
        (6, 'NotOperator'): 99, (6, 'NumberBrackets'): 54,
        (6, 'NumberExpression'): 37, (6, 'UnaryFormula'): 20,
        (6, 'UnaryTemporalOperator'): 24, (6, 'Xor'): 8,
        (7, 'ImplicationOperator'): 9, (8, 'XorOperator'): 12,
        (9, 'Assignment'): 34, (9, 'AtomicFormula'): 23,
        (9, 'AtomicNumberExpression'): 49, (9, 'BinaryTemporalFormula'): 17,
        (9, 'BooleanAtomicFormula'): 29, (9, 'Brackets'): 28,
        (9, 'CalculationSubformula'): 35, (9, 'Conjunction'): 14,
        (9, 'Disjunction'): 11, (9, 'FinallyOperator'): 96,
        (9, 'GloballyOperator'): 98,
        (9, 'LeastSignificantBitOverwriteExpression'): 46,
        (9, 'MultiplicativeNumber'): 41, (9, 'NextOperator'): 97,
        (9, 'NotOperator'): 99, (9, 'NumberBrackets'): 54,
        (9, 'NumberExpression'): 37, (9, 'UnaryFormula'): 20,
        (9, 'UnaryTemporalOperator'): 24, (9, 'Xor'): 10,
        (10, 'XorOperator'): 12, (11, 'DisjunctionOperator'): 15,
        (12, 'Assignment'): 34, (12, 'AtomicFormula'): 23,
        (12, 'AtomicNumberExpression'): 49, (12, 'BinaryTemporalFormula'): 17,
        (12, 'BooleanAtomicFormula'): 29, (12, 'Brackets'): 28,
        (12, 'CalculationSubformula'): 35, (12, 'Conjunction'): 14,
        (12, 'Disjunction'): 13, (12, 'FinallyOperator'): 96,
        (12, 'GloballyOperator'): 98,
        (12, 'LeastSignificantBitOverwriteExpression'): 46,
        (12, 'MultiplicativeNumber'): 41, (12, 'NextOperator'): 97,
        (12, 'NotOperator'): 99, (12, 'NumberBrackets'): 54,
        (12, 'NumberExpression'): 37, (12, 'UnaryFormula'): 20,
        (12, 'UnaryTemporalOperator'): 24, (13, 'DisjunctionOperator'): 15,
        (14, 'ConjunctionOperator'): 18, (15, 'Assignment'): 34,
        (15, 'AtomicFormula'): 23, (15, 'AtomicNumberExpression'): 49,
        (15, 'BinaryTemporalFormula'): 17, (15, 'BooleanAtomicFormula'): 29,
        (15, 'Brackets'): 28, (15, 'CalculationSubformula'): 35,
        (15, 'Conjunction'): 16, (15, 'FinallyOperator'): 96,
        (15, 'GloballyOperator'): 98,
        (15, 'LeastSignificantBitOverwriteExpression'): 46,
        (15, 'MultiplicativeNumber'): 41, (15, 'NextOperator'): 97,
        (15, 'NotOperator'): 99, (15, 'NumberBrackets'): 54,
        (15, 'NumberExpression'): 37, (15, 'UnaryFormula'): 20,
        (15, 'UnaryTemporalOperator'): 24, (16, 'ConjunctionOperator'): 18,
        (17, 'BinaryTemporalOperator'): 21, (17, 'UntilOperator'): 58,
        (17, 'WeakUntilOperator'): 59, (18, 'Assignment'): 34,
        (18, 'AtomicFormula'): 23, (18, 'AtomicNumberExpression'): 49,
        (18, 'BinaryTemporalFormula'): 19, (18, 'BooleanAtomicFormula'): 29,
        (18, 'Brackets'): 28, (18, 'CalculationSubformula'): 35,
        (18, 'FinallyOperator'): 96, (18, 'GloballyOperator'): 98,
        (18, 'LeastSignificantBitOverwriteExpression'): 46,
        (18, 'MultiplicativeNumber'): 41, (18, 'NextOperator'): 97,
        (18, 'NotOperator'): 99, (18, 'NumberBrackets'): 54,
        (18, 'NumberExpression'): 37, (18, 'UnaryFormula'): 20,
        (18, 'UnaryTemporalOperator'): 24, (19, 'BinaryTemporalOperator'): 21,
        (19, 'UntilOperator'): 58, (19, 'WeakUntilOperator'): 59,
        (21, 'Assignment'): 34, (21, 'AtomicFormula'): 23,
        (21, 'AtomicNumberExpression'): 49, (21, 'BooleanAtomicFormula'): 29,
        (21, 'Brackets'): 28, (21, 'CalculationSubformula'): 35,
        (21, 'FinallyOperator'): 96, (21, 'GloballyOperator'): 98,
        (21, 'LeastSignificantBitOverwriteExpression'): 46,
        (21, 'MultiplicativeNumber'): 41, (21, 'NextOperator'): 97,
        (21, 'NotOperator'): 99, (21, 'NumberBrackets'): 54,
        (21, 'NumberExpression'): 37, (21, 'UnaryFormula'): 22,
        (21, 'UnaryTemporalOperator'): 24, (24, 'Assignment'): 34,
        (24, 'AtomicFormula'): 23, (24, 'AtomicNumberExpression'): 49,
        (24, 'BooleanAtomicFormula'): 29, (24, 'Brackets'): 28,
        (24, 'CalculationSubformula'): 35, (24, 'FinallyOperator'): 96,
        (24, 'GloballyOperator'): 98,
        (24, 'LeastSignificantBitOverwriteExpression'): 46,
        (24, 'MultiplicativeNumber'): 41, (24, 'NextOperator'): 97,
        (24, 'NotOperator'): 99, (24, 'NumberBrackets'): 54,
        (24, 'NumberExpression'): 37, (24, 'UnaryFormula'): 25,
        (24, 'UnaryTemporalOperator'): 24, (30, 'Assignment'): 34,
        (30, 'AtomicFormula'): 23, (30, 'AtomicNumberExpression'): 49,
        (30, 'Biimplication'): 5, (30, 'BinaryTemporalFormula'): 17,
        (30, 'BooleanAtomicFormula'): 29, (30, 'Brackets'): 28,
        (30, 'CalculationSubformula'): 35, (30, 'Conjunction'): 14,
        (30, 'Disjunction'): 11, (30, 'FinallyOperator'): 96,
        (30, 'GloballyOperator'): 98, (30, 'Implication'): 3,
        (30, 'LeastSignificantBitOverwriteExpression'): 46,
        (30, 'MultiplicativeNumber'): 41, (30, 'NextOperator'): 97,
        (30, 'NotOperator'): 99, (30, 'NumberBrackets'): 54,
        (30, 'NumberExpression'): 38, (30, 'UnaryFormula'): 20,
        (30, 'UnaryTemporalOperator'): 24, (30, 'Xor'): 8,
        (32, 'Assignment'): 34, (32, 'AtomicFormula'): 23,
        (32, 'AtomicNumberExpression'): 49, (32, 'Biimplication'): 4,
        (32, 'BinaryTemporalFormula'): 17, (32, 'BooleanAtomicFormula'): 29,
        (32, 'Brackets'): 28, (32, 'CalculationSubformula'): 35,
        (32, 'Conjunction'): 14, (32, 'Disjunction'): 11,
        (32, 'FinallyOperator'): 96, (32, 'GloballyOperator'): 98,
        (32, 'Implication'): 3,
        (32, 'LeastSignificantBitOverwriteExpression'): 46,
        (32, 'MultiplicativeNumber'): 41, (32, 'NextOperator'): 97,
        (32, 'NotOperator'): 99, (32, 'NumberBrackets'): 54,
        (32, 'NumberExpression'): 37, (32, 'UnaryFormula'): 20,
        (32, 'UnaryTemporalOperator'): 24, (32, 'Xor'): 8,
        (37, 'EqualOperator'): 80, (37, 'GreaterEqualOperator'): 82,
        (37, 'GreaterOperator'): 79, (37, 'NumberComparisonOperator'): 39,
        (37, 'SmallerEqualOperator'): 83, (37, 'SmallerOperator'): 84,
        (37, 'UnequalOperator'): 81, (38, 'EqualOperator'): 80,
        (38, 'GreaterEqualOperator'): 82, (38, 'GreaterOperator'): 79,
        (38, 'NumberComparisonOperator'): 39, (38, 'SmallerEqualOperator'): 83,
        (38, 'SmallerOperator'): 84, (38, 'UnequalOperator'): 81,
        (39, 'AtomicNumberExpression'): 49,
        (39, 'LeastSignificantBitOverwriteExpression'): 46,
        (39, 'MultiplicativeNumber'): 41, (39, 'NumberBrackets'): 54,
        (39, 'NumberExpression'): 40, (41, 'AdditionOperator'): 42,
        (42, 'AtomicNumberExpression'): 49,
        (42, 'LeastSignificantBitOverwriteExpression'): 46,
        (42, 'MultiplicativeNumber'): 41, (42, 'NumberBrackets'): 54,
        (42, 'NumberExpression'): 43, (44, 'AtomicNumberExpression'): 49,
        (44, 'LeastSignificantBitOverwriteExpression'): 46,
        (44, 'MultiplicativeNumber'): 41, (44, 'NumberBrackets'): 54,
        (44, 'NumberExpression'): 45, (46, 'MultiplicationOperator'): 47,
        (47, 'AtomicNumberExpression'): 49,
        (47, 'LeastSignificantBitOverwriteExpression'): 48,
        (47, 'NumberBrackets'): 54,
        (49, 'LeastSignificantBitOverwriteOperator'): 50,
        (50, 'AtomicNumberExpression'): 51, (50, 'NumberBrackets'): 54,
        (55, 'AtomicNumberExpression'): 49,
        (55, 'LeastSignificantBitOverwriteExpression'): 46,
        (55, 'MultiplicativeNumber'): 41, (55, 'NumberBrackets'): 54,
        (55, 'NumberExpression'): 56
    }
    _shift = {
        (0, '!'): 108, (0, '('): 30, (0, '<'): 100, (0, 'F'): 102,
        (0, 'FALSE'): 26, (0, 'G'): 107, (0, 'TRUE'): 27, (0, 'X'): 105,
        (0, '['): 32, (0, 'boolID'): 36, (0, 'next'): 104, (0, 'numID'): 52,
        (0, 'numeral'): 53, (0, '~'): 109, (1, EOF): 110, (2, '<'): 66,
        (3, '-'): 62, (4, '<'): 66, (4, ']'): 33, (5, ')'): 31, (5, '<'): 66,
        (6, '!'): 108, (6, '('): 30, (6, '<'): 100, (6, 'F'): 102,
        (6, 'FALSE'): 26, (6, 'G'): 107, (6, 'TRUE'): 27, (6, 'X'): 105,
        (6, '['): 32, (6, 'boolID'): 36, (6, 'next'): 104, (6, 'numID'): 52,
        (6, 'numeral'): 53, (6, '~'): 109, (7, '-'): 62, (8, '^'): 95,
        (9, '!'): 108, (9, '('): 30, (9, '<'): 100, (9, 'F'): 102,
        (9, 'FALSE'): 26, (9, 'G'): 107, (9, 'TRUE'): 27, (9, 'X'): 105,
        (9, '['): 32, (9, 'boolID'): 36, (9, 'next'): 104, (9, 'numID'): 52,
        (9, 'numeral'): 53, (9, '~'): 109, (10, '^'): 95, (11, '\\'): 71,
        (11, '|'): 73, (12, '!'): 108, (12, '('): 30, (12, '<'): 100,
        (12, 'F'): 102, (12, 'FALSE'): 26, (12, 'G'): 107, (12, 'TRUE'): 27,
        (12, 'X'): 105, (12, '['): 32, (12, 'boolID'): 36, (12, 'next'): 104,
        (12, 'numID'): 52, (12, 'numeral'): 53, (12, '~'): 109, (13, '\\'): 71,
        (13, '|'): 73, (14, '&'): 77, (14, '/'): 75, (15, '!'): 108,
        (15, '('): 30, (15, '<'): 100, (15, 'F'): 102, (15, 'FALSE'): 26,
        (15, 'G'): 107, (15, 'TRUE'): 27, (15, 'X'): 105, (15, '['): 32,
        (15, 'boolID'): 36, (15, 'next'): 104, (15, 'numID'): 52,
        (15, 'numeral'): 53, (15, '~'): 109, (16, '&'): 77, (16, '/'): 75,
        (17, 'U'): 60, (17, 'W'): 61, (18, '!'): 108, (18, '('): 30,
        (18, '<'): 100, (18, 'F'): 102, (18, 'FALSE'): 26, (18, 'G'): 107,
        (18, 'TRUE'): 27, (18, 'X'): 105, (18, '['): 32, (18, 'boolID'): 36,
        (18, 'next'): 104, (18, 'numID'): 52, (18, 'numeral'): 53,
        (18, '~'): 109, (19, 'U'): 60, (19, 'W'): 61, (21, '!'): 108,
        (21, '('): 30, (21, '<'): 100, (21, 'F'): 102, (21, 'FALSE'): 26,
        (21, 'G'): 107, (21, 'TRUE'): 27, (21, 'X'): 105, (21, '['): 32,
        (21, 'boolID'): 36, (21, 'next'): 104, (21, 'numID'): 52,
        (21, 'numeral'): 53, (21, '~'): 109, (24, '!'): 108, (24, '('): 30,
        (24, '<'): 100, (24, 'F'): 102, (24, 'FALSE'): 26, (24, 'G'): 107,
        (24, 'TRUE'): 27, (24, 'X'): 105, (24, '['): 32, (24, 'boolID'): 36,
        (24, 'next'): 104, (24, 'numID'): 52, (24, 'numeral'): 53,
        (24, '~'): 109, (30, '!'): 108, (30, '('): 30, (30, ')'): 103,
        (30, '<'): 100, (30, 'F'): 102, (30, 'FALSE'): 26, (30, 'G'): 107,
        (30, 'TRUE'): 27, (30, 'X'): 105, (30, '['): 32, (30, 'boolID'): 36,
        (30, 'next'): 104, (30, 'numID'): 52, (30, 'numeral'): 53,
        (30, '~'): 109, (32, '!'): 108, (32, '('): 30, (32, '<'): 100,
        (32, 'F'): 102, (32, 'FALSE'): 26, (32, 'G'): 107, (32, 'TRUE'): 27,
        (32, 'X'): 105, (32, '['): 32, (32, ']'): 106, (32, 'boolID'): 36,
        (32, 'next'): 104, (32, 'numID'): 52, (32, 'numeral'): 53,
        (32, '~'): 109, (37, '!'): 88, (37, '<'): 86, (37, '='): 87,
        (37, '>'): 85, (38, '!'): 88, (38, ')'): 57, (38, '<'): 86,
        (38, '='): 87, (38, '>'): 85, (39, '('): 55, (39, 'numID'): 52,
        (39, 'numeral'): 53, (41, '+'): 92, (41, 'SubtractionOperator'): 44,
        (42, '('): 55, (42, 'numID'): 52, (42, 'numeral'): 53, (44, '('): 55,
        (44, 'numID'): 52, (44, 'numeral'): 53, (46, '*'): 93, (47, '('): 55,
        (47, 'numID'): 52, (47, 'numeral'): 53,
        (49, 'LEASTSIGNIFICANTBITOVERWRITES'): 94, (50, '('): 55,
        (50, 'numID'): 52, (50, 'numeral'): 53, (55, '('): 55,
        (55, 'numID'): 52, (55, 'numeral'): 53, (56, ')'): 57, (62, '-'): 63,
        (62, '>'): 65, (63, '>'): 64, (66, '-'): 67, (67, '-'): 68,
        (67, '>'): 70, (68, '>'): 69, (71, '/'): 72, (73, '|'): 74,
        (75, '\\'): 76, (77, '&'): 78, (85, '='): 91, (86, '='): 90,
        (88, '='): 89, (100, '>'): 101
    }

    def __init__(self, max_err=None, errcorr_pre=4, errcorr_post=4):
        """Create a new parser instance.

        The constructor arguments are all optional, they control the
        handling of parse errors: `max_err` can be given to bound the
        number of errors reported during one run of the parser.
        `errcorr_pre` controls how many tokens before an invalid token
        the parser considers when trying to repair the input.
        `errcorr_post` controls how far beyond an invalid token the
        parser reads when evaluating the quality of an attempted
        repair.
        """
        self.max_err = max_err
        self.m = errcorr_pre
        self.n = errcorr_post

    @staticmethod
    def leaves(tree):
        """Iterate over the leaves of a parse tree.

        This function can be used to reconstruct the input from a
        parse tree.
        """
        if tree[0] in Parser.terminals:
            yield tree
        else:
            for x in tree[1:]:
                for t in Parser.leaves(x):
                    yield t

    def _parse(self, input, stack, state):
        """Internal function to construct a parse tree.

        'Input' is the input token stream, 'stack' is the inital stack
        and 'state' is the inital state of the automaton.

        Returns a 4-tuple (done, count, state, error).  'done' is a
        boolean indicationg whether parsing is completed, 'count' is
        number of successfully shifted tokens, and 'error' is None on
        success or else the first token which could not be parsed.
        """
        read_next = True
        count = 0
        while state != self._halting_state:
            if read_next:
                try:
                    lookahead = input.next()
                except StopIteration:
                    return (False,count,state,None)
                read_next = False
            token = lookahead[0]

            if (state,token) in self._shift:
                stack.append((state,lookahead))
                state = self._shift[(state,token)]
                read_next = True
                count += 1
            elif (state,token) in self._reduce:
                X,n = self._reduce[(state,token)]
                if n > 0:
                    state = stack[-n][0]
                    tree = (X,) + tuple(s[1] for s in stack[-n:])
                    del stack[-n:]
                else:
                    tree = (X,)
                stack.append((state,tree))
                state = self._goto[(state,X)]
            else:
                return (False,count,state,lookahead)
        return (True,count,state,None)

    def _try_parse(self, input, stack, state):
        count = 0
        while state != self._halting_state and count < len(input):
            token = input[count][0]

            if (state,token) in self._shift:
                stack.append(state)
                state = self._shift[(state,token)]
                count += 1
            elif (state,token) in self._reduce:
                X,n = self._reduce[(state,token)]
                if n > 0:
                    state = stack[-n]
                    del stack[-n:]
                stack.append(state)
                state = self._goto[(state,X)]
            else:
                break
        return count

    def parse(self, input):
        """Parse the tokens from `input` and construct a parse tree.

        `input` must be an interable over tuples.  The first element
        of each tuple must be a terminal symbol of the grammar which
        is used for parsing.  All other element of the tuple are just
        copied into the constructed parse tree.

        If `input` is invalid, a ParseErrors exception is raised.
        Otherwise the function returns the parse tree.
        """
        errors = []
        input = chain(input, [(self.EOF,)])
        stack = []
        state = 0
        while True:
            done,_,state,lookahead = self._parse(input, stack, state)
            if done:
                break

            expect = [ t for s,t in self._reduce.keys()+self._shift.keys()
                       if s == state ]
            errors.append((lookahead, expect))
            if self.max_err is not None and len(errors) >= self.max_err:
                raise self.ParseErrors(errors, None)

            queue = []
            def split_input(m, stack, lookahead, input, queue):
                for s in stack:
                    for t in self.leaves(s[1]):
                        queue.append(t)
                        if len(queue) > m:
                            yield queue.pop(0)
                queue.append(lookahead)
            in2 = split_input(self.m, stack, lookahead, input, queue)
            stack = []
            done,_,state,lookahead = self._parse(in2, stack, 0)
            m = len(queue)
            for i in range(0, self.n):
                try:
                    queue.append(input.next())
                except StopIteration:
                    break

            def vary_queue(queue, m):
                for i in range(m-1, -1, -1):
                    for t in self.terminals:
                        yield queue[:i]+[(t,)]+queue[i:]
                    if queue[i][0] == self.EOF:
                        continue
                    for t in self.terminals:
                        if t == queue[i]:
                            continue
                        yield queue[:i]+[(t,)]+queue[i+1:]
                    yield queue[:i]+queue[i+1:]
            best_val = len(queue)-m+1
            best_queue = queue
            for q2 in vary_queue(queue, m):
                pos = self._try_parse(q2, [ s[0] for s in stack ], state)
                val = len(q2) - pos
                if val < best_val:
                    best_val = val
                    best_queue = q2
                    if val == len(q2):
                        break
            if best_val >= len(queue)-m+1:
                raise self.ParseErrors(errors, None)
            input = chain(best_queue, input)

        tree = stack[0][1]
        if errors:
            raise self.ParseErrors(errors, tree)
        return tree
