#!/usr/bin/env python3
#
# This script takes an explicit-state implementation generated by slugs and parses the encoded integer values into a readable form.
#
# Note that there is no error reporting -- the script just throws an exception if the input is not in the expected format.
import os, sys

for line in sys.stdin.readlines():
    if "<" in line and ">" in line:
        part1 = line[0:line.index("<")]
        part2 = line[line.index("<")+1:]
        part3 = part2[part2.index(">")+1:]
        part2 = part2[0:part2.index(">")]
        
        # Split the components
        stateComponents = part2.split(", ")
        stateComponents = [a.split(":") for a in stateComponents]
        for a in stateComponents:
            assert len(a)==2
        stateComponents = [(a[0],a[1]) for a in stateComponents]
        parsedValues = {}
        for (a,aValue) in stateComponents:
            if "@0." in a:
            
                # This is the leading element of the encoded integer
                head = a.split("@")[0]
                tail = a.split("@")[1].split(".")
                assert len(tail)==3
                assert tail[0]=="0" # Position component
                minValue = int(tail[1])
                maxValue = int(tail[2])
                value = minValue
                if aValue=="1":
                    value += 1
                else:
                    assert aValue=="0"
                    
                # Complete the found value
                for (b,bValue) in stateComponents:
                    parts = b.split("@")
                    if len(parts)==2 and parts[0]==head and not ("." in parts[1]):
                        assert len(parts)==2
                        m = int(parts[1])
                        assert m>0
                        if bValue=="1":
                            value += (1 << m)
                        else:
                            assert bValue=="0"
                        
                parsedValues[a] = head+"="+str(value)
        
        
        # Now generate the list of filtered components       
        filteredComponents = []
        for (a,aValue) in stateComponents:
            if a in parsedValues:
                filteredComponents.append(parsedValues[a])
            else:
                if not "@" in a:
                    filteredComponents.append(a+":"+aValue)
                
        # Print this line
        sys.stdout.write(part1)   
        sys.stdout.write("<")
        sys.stdout.write(", ".join(filteredComponents))
        sys.stdout.write(">")
        sys.stdout.write(part3)
    else:
        sys.stdout.write(line)
