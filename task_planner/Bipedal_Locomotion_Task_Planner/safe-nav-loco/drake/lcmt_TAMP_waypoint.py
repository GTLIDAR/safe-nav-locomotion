"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcmt_TAMP_waypoint(object):
    __slots__ = ["stepL", "stepH", "turn", "stop", "forward", "stanceFoot", "orientation", "s", "TaskAchieved", "N", "S", "E", "W"]

    __typenames__ = ["int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int8_t", "int16_t", "int8_t", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.stepL = 0
        self.stepH = 0
        self.turn = 0
        self.stop = 0
        self.forward = 0
        self.stanceFoot = 0
        self.orientation = 0
        self.s = 0
        self.TaskAchieved = 0
        self.N = 0.0
        self.S = 0.0
        self.E = 0.0
        self.W = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_TAMP_waypoint._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbbbbbbhbdddd", self.stepL, self.stepH, self.turn, self.stop, self.forward, self.stanceFoot, self.orientation, self.s, self.TaskAchieved, self.N, self.S, self.E, self.W))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_TAMP_waypoint._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_TAMP_waypoint._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_TAMP_waypoint()
        self.stepL, self.stepH, self.turn, self.stop, self.forward, self.stanceFoot, self.orientation, self.s, self.TaskAchieved, self.N, self.S, self.E, self.W = struct.unpack(">bbbbbbbhbdddd", buf.read(42))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if lcmt_TAMP_waypoint in parents: return 0
        tmphash = (0x58def159ff74fe94) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_TAMP_waypoint._packed_fingerprint is None:
            lcmt_TAMP_waypoint._packed_fingerprint = struct.pack(">Q", lcmt_TAMP_waypoint._get_hash_recursive([]))
        return lcmt_TAMP_waypoint._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", lcmt_TAMP_waypoint._get_packed_fingerprint())[0]

